module bindbc.blend2d.binddynamic;

version(BindBlend2D_Static) {}
else version = BindBlend2D_Dynamic;

version(BindBlend2D_Dynamic):

import core.stdc.stdint;
import core.stdc.stdarg;

import bindbc.loader;
import bindbc.blend2d.types;

extern(C) @nogc nothrow {
    alias pblDefaultApproximationOptions = const BLApproximationOptions;
    alias pblFormatInfo = const(BLFormatInfo)[BLFormat.BL_FORMAT_RESERVED_COUNT];
    alias pblMatrix2DMapPointDArrayFuncs = BLMapPointDArrayFunc[BLMatrix2DType.BL_MATRIX2D_TYPE_COUNT];
    alias pblNone = BLVariantCore[BLImplType.BL_IMPL_TYPE_COUNT];

    //alias pblRuntimeAllocImpl not found
    //alias pblRuntimeFreeImpl not found

    alias pblArrayAppendF32 = BLResult function(BLArrayCore* self, float value);
    alias pblArrayAppendF64 = BLResult function(BLArrayCore* self, double value);
    alias pblArrayAppendItem = BLResult function(BLArrayCore* self, const(void)* item);
    alias pblArrayAppendU16 = BLResult function(BLArrayCore* self, ushort value);
    alias pblArrayAppendU32 = BLResult function(BLArrayCore* self, uint value);
    alias pblArrayAppendU64 = BLResult function(BLArrayCore* self, ulong value);
    alias pblArrayAppendU8 = BLResult function(BLArrayCore* self, ubyte value);
    alias pblArrayAppendView = BLResult function(BLArrayCore* self, const(void)* items, size_t n);
    alias pblArrayAssignDeep = BLResult function(BLArrayCore* self, const(BLArrayCore)* other);
    alias pblArrayAssignMove = BLResult function(BLArrayCore* self, BLArrayCore* other);
    alias pblArrayAssignView = BLResult function(BLArrayCore* self, const(void)* items, size_t n);
    alias pblArrayAssignWeak = BLResult function(BLArrayCore* self, const(BLArrayCore)* other);
    alias pblArrayClear = BLResult function(BLArrayCore* self);
    alias pblArrayCreateFromData = BLResult function(BLArrayCore* self, void* data, size_t size, size_t capacity, uint dataAccessFlags, BLDestroyImplFunc destroyFunc, void* destroyData);
    alias pblArrayEquals = bool function(const(BLArrayCore)* a, const(BLArrayCore)* b);
    alias pblArrayGetCapacity = size_t function(const(BLArrayCore)* self);
    alias pblArrayGetData = const(void)* function(const(BLArrayCore)* self);
    alias pblArrayGetSize = size_t function(const(BLArrayCore)* self);
    alias pblArrayInit = BLResult function(BLArrayCore* self, uint arrayTypeId);
    alias pblArrayInsertF32 = BLResult function(BLArrayCore* self, size_t index, float value);
    alias pblArrayInsertF64 = BLResult function(BLArrayCore* self, size_t index, double value);
    alias pblArrayInsertItem = BLResult function(BLArrayCore* self, size_t index, const(void)* item);
    alias pblArrayInsertOp = BLResult function(BLArrayCore* self, size_t index, size_t n, void** dataOut);
    alias pblArrayInsertU16 = BLResult function(BLArrayCore* self, size_t index, ushort value);
    alias pblArrayInsertU32 = BLResult function(BLArrayCore* self, size_t index, uint value);
    alias pblArrayInsertU64 = BLResult function(BLArrayCore* self, size_t index, ulong value);
    alias pblArrayInsertU8 = BLResult function(BLArrayCore* self, size_t index, ubyte value);
    alias pblArrayInsertView = BLResult function(BLArrayCore* self, size_t index, const(void)* items, size_t n);
    alias pblArrayMakeMutable = BLResult function(BLArrayCore* self, void** dataOut);
    alias pblArrayModifyOp = BLResult function(BLArrayCore* self, uint op, size_t n, void** dataOut);
    alias pblArrayRemoveIndex = BLResult function(BLArrayCore* self, size_t index);
    alias pblArrayRemoveRange = BLResult function(BLArrayCore* self, size_t rStart, size_t rEnd);
    alias pblArrayReplaceF32 = BLResult function(BLArrayCore* self, size_t index, float value);
    alias pblArrayReplaceF64 = BLResult function(BLArrayCore* self, size_t index, double value);
    alias pblArrayReplaceItem = BLResult function(BLArrayCore* self, size_t index, const(void)* item);
    alias pblArrayReplaceU16 = BLResult function(BLArrayCore* self, size_t index, ushort value);
    alias pblArrayReplaceU32 = BLResult function(BLArrayCore* self, size_t index, uint value);
    alias pblArrayReplaceU64 = BLResult function(BLArrayCore* self, size_t index, ulong value);
    alias pblArrayReplaceU8 = BLResult function(BLArrayCore* self, size_t index, ubyte value);
    alias pblArrayReplaceView = BLResult function(BLArrayCore* self, size_t rStart, size_t rEnd, const(void)* items, size_t n);
    alias pblArrayReserve = BLResult function(BLArrayCore* self, size_t n);
    alias pblArrayReset = BLResult function(BLArrayCore* self);
    alias pblArrayResize = BLResult function(BLArrayCore* self, size_t n, const(void)* fill);
    alias pblArrayShrink = BLResult function(BLArrayCore* self);
    alias pblContextAssignMove = BLResult function(BLContextCore* self, BLContextCore* other);
    alias pblContextAssignWeak = BLResult function(BLContextCore* self, const(BLContextCore)* other);
    alias pblContextBegin = BLResult function(BLContextCore* self, BLImageCore* image, const(BLContextCreateInfo)* options);
    alias pblContextBlitImageD = BLResult function(BLContextCore* self, const(BLPoint)* pt, const(BLImageCore)* img, const(BLRectI)* imgArea);
    alias pblContextBlitImageI = BLResult function(BLContextCore* self, const(BLPointI)* pt, const(BLImageCore)* img, const(BLRectI)* imgArea);
    alias pblContextBlitScaledImageD = BLResult function(BLContextCore* self, const(BLRect)* rect, const(BLImageCore)* img, const(BLRectI)* imgArea);
    alias pblContextBlitScaledImageI = BLResult function(BLContextCore* self, const(BLRectI)* rect, const(BLImageCore)* img, const(BLRectI)* imgArea);
    alias pblContextClearAll = BLResult function(BLContextCore* self);
    alias pblContextClearRectD = BLResult function(BLContextCore* self, const(BLRect)* rect);
    alias pblContextClearRectI = BLResult function(BLContextCore* self, const(BLRectI)* rect);
    alias pblContextClipToRectD = BLResult function(BLContextCore* self, const(BLRect)* rect);
    alias pblContextClipToRectI = BLResult function(BLContextCore* self, const(BLRectI)* rect);
    alias pblContextEnd = BLResult function(BLContextCore* self);
    alias pblContextFillAll = BLResult function(BLContextCore* self);
    alias pblContextFillGeometry = BLResult function(BLContextCore* self, uint geometryType, const(void)* geometryData);
    alias pblContextFillGlyphRunD = BLResult function(BLContextCore* self, const(BLPoint)* pt, const(BLFontCore)* font, const(BLGlyphRun)* glyphRun);
    alias pblContextFillGlyphRunI = BLResult function(BLContextCore* self, const(BLPointI)* pt, const(BLFontCore)* font, const(BLGlyphRun)* glyphRun);
    alias pblContextFillPathD = BLResult function(BLContextCore* self, const(BLPathCore)* path);
    alias pblContextFillRectD = BLResult function(BLContextCore* self, const(BLRect)* rect);
    alias pblContextFillRectI = BLResult function(BLContextCore* self, const(BLRectI)* rect);
    alias pblContextFillTextD = BLResult function(BLContextCore* self, const(BLPoint)* pt, const(BLFontCore)* font, const(void)* text, size_t size, uint encoding);
    alias pblContextFillTextI = BLResult function(BLContextCore* self, const(BLPointI)* pt, const(BLFontCore)* font, const(void)* text, size_t size, uint encoding);
    alias pblContextFlush = BLResult function(BLContextCore* self, uint flags);
    alias pblContextGetFillStyle = BLResult function(const(BLContextCore)* self, void* object);
    alias pblContextGetFillStyleRgba32 = BLResult function(const(BLContextCore)* self, uint* rgba32);
    alias pblContextGetFillStyleRgba64 = BLResult function(const(BLContextCore)* self, ulong* rgba64);
    alias pblContextGetMetaMatrix = BLResult function(const(BLContextCore)* self, BLMatrix2D* m);
    alias pblContextGetStrokeOptions = BLResult function(const(BLContextCore)* self, BLStrokeOptionsCore* options);
    alias pblContextGetStrokeStyle = BLResult function(const(BLContextCore)* self, void* object);
    alias pblContextGetStrokeStyleRgba32 = BLResult function(const(BLContextCore)* self, uint* rgba32);
    alias pblContextGetStrokeStyleRgba64 = BLResult function(const(BLContextCore)* self, ulong* rgba64);
    alias pblContextGetType = BLResult function(const(BLContextCore)* self);
    alias pblContextGetUserMatrix = BLResult function(const(BLContextCore)* self, BLMatrix2D* m);
    alias pblContextInit = BLResult function(BLContextCore* self);
    alias pblContextInitAs = BLResult function(BLContextCore* self, BLImageCore* image, const(BLContextCreateInfo)* options);
    alias pblContextMatrixOp = BLResult function(BLContextCore* self, uint opType, const(void)* opData);
    alias pblContextReset = BLResult function(BLContextCore* self);
    alias pblContextRestore = BLResult function(BLContextCore* self, const(BLContextCookie)* cookie);
    alias pblContextRestoreClipping = BLResult function(BLContextCore* self);
    alias pblContextSave = BLResult function(BLContextCore* self, BLContextCookie* cookie);
    alias pblContextSetApproximationOptions = BLResult function(BLContextCore* self, const(BLApproximationOptions)* options);
    alias pblContextSetCompOp = BLResult function(BLContextCore* self, uint compOp);
    alias pblContextSetFillAlpha = BLResult function(BLContextCore* self, double alpha);
    alias pblContextSetFillRule = BLResult function(BLContextCore* self, uint fillRule);
    alias pblContextSetFillStyle = BLResult function(BLContextCore* self, const(void)* object);
    alias pblContextSetFillStyleRgba32 = BLResult function(BLContextCore* self, uint rgba32);
    alias pblContextSetFillStyleRgba64 = BLResult function(BLContextCore* self, ulong rgba64);
    alias pblContextSetFlattenMode = BLResult function(BLContextCore* self, uint mode);
    alias pblContextSetFlattenTolerance = BLResult function(BLContextCore* self, double tolerance);
    alias pblContextSetGlobalAlpha = BLResult function(BLContextCore* self, double alpha);
    alias pblContextSetHint = BLResult function(BLContextCore* self, uint hintType, uint value);
    alias pblContextSetHints = BLResult function(BLContextCore* self, const(BLContextHints)* hints);
    alias pblContextSetStrokeAlpha = BLResult function(BLContextCore* self, double alpha);
    alias pblContextSetStrokeCap = BLResult function(BLContextCore* self, uint position, uint strokeCap);
    alias pblContextSetStrokeCaps = BLResult function(BLContextCore* self, uint strokeCap);
    alias pblContextSetStrokeDashArray = BLResult function(BLContextCore* self, const(BLArrayCore)* dashArray);
    alias pblContextSetStrokeDashOffset = BLResult function(BLContextCore* self, double dashOffset);
    alias pblContextSetStrokeJoin = BLResult function(BLContextCore* self, uint strokeJoin);
    alias pblContextSetStrokeMiterLimit = BLResult function(BLContextCore* self, double miterLimit);
    alias pblContextSetStrokeOptions = BLResult function(BLContextCore* self, const(BLStrokeOptionsCore)* options);
    alias pblContextSetStrokeStyle = BLResult function(BLContextCore* self, const(void)* object);
    alias pblContextSetStrokeStyleRgba32 = BLResult function(BLContextCore* self, uint rgba32);
    alias pblContextSetStrokeStyleRgba64 = BLResult function(BLContextCore* self, ulong rgba64);
    alias pblContextSetStrokeTransformOrder = BLResult function(BLContextCore* self, uint transformOrder);
    alias pblContextSetStrokeWidth = BLResult function(BLContextCore* self, double width);
    alias pblContextStrokeGeometry = BLResult function(BLContextCore* self, uint geometryType, const(void)* geometryData);
    alias pblContextStrokeGlyphRunD = BLResult function(BLContextCore* self, const(BLPoint)* pt, const(BLFontCore)* font, const(BLGlyphRun)* glyphRun);
    alias pblContextStrokeGlyphRunI = BLResult function(BLContextCore* self, const(BLPointI)* pt, const(BLFontCore)* font, const(BLGlyphRun)* glyphRun);
    alias pblContextStrokePathD = BLResult function(BLContextCore* self, const(BLPathCore)* path);
    alias pblContextStrokeRectD = BLResult function(BLContextCore* self, const(BLRect)* rect);
    alias pblContextStrokeRectI = BLResult function(BLContextCore* self, const(BLRectI)* rect);
    alias pblContextStrokeTextD = BLResult function(BLContextCore* self, const(BLPoint)* pt, const(BLFontCore)* font, const(void)* text, size_t size, uint encoding);
    alias pblContextStrokeTextI = BLResult function(BLContextCore* self, const(BLPointI)* pt, const(BLFontCore)* font, const(void)* text, size_t size, uint encoding);
    alias pblContextUserToMeta = BLResult function(BLContextCore* self);
    alias pblFileClose = BLResult function(BLFileCore* self);
    alias pblFileGetSize = BLResult function(BLFileCore* self, ulong* fileSizeOut);
    alias pblFileInit = BLResult function(BLFileCore* self);
    alias pblFileOpen = BLResult function(BLFileCore* self, const(char)* fileName, uint openFlags);
    alias pblFileRead = BLResult function(BLFileCore* self, void* buffer, size_t n, size_t* bytesReadOut);
    alias pblFileReset = BLResult function(BLFileCore* self);
    alias pblFileSeek = BLResult function(BLFileCore* self, long offset, uint seekType, long* positionOut);
    alias pblFileSystemReadFile = BLResult function(const(char)* fileName, BLArrayCore* dst, size_t maxSize, uint readFlags);
    alias pblFileSystemWriteFile = BLResult function(const(char)* fileName, const(void)* data, size_t size, size_t* bytesWrittenOut);
    alias pblFileTruncate = BLResult function(BLFileCore* self, long maxSize);
    alias pblFileWrite = BLResult function(BLFileCore* self, const(void)* buffer, size_t n, size_t* bytesWrittenOut);
    alias pblFontApplyGPos = BLResult function(const(BLFontCore)* self, BLGlyphBufferCore* gb, size_t index, BLBitWord lookups);
    alias pblFontApplyGSub = BLResult function(const(BLFontCore)* self, BLGlyphBufferCore* gb, size_t index, BLBitWord lookups);
    alias pblFontApplyKerning = BLResult function(const(BLFontCore)* self, BLGlyphBufferCore* gb);
    alias pblFontAssignMove = BLResult function(BLFontCore* self, BLFontCore* other);
    alias pblFontAssignWeak = BLResult function(BLFontCore* self, const(BLFontCore)* other);
    alias pblFontCreateFromFace = BLResult function(BLFontCore* self, const(BLFontFaceCore)* face, float size);
    alias pblFontDataAssignMove = BLResult function(BLFontDataCore* self, BLFontDataCore* other);
    alias pblFontDataAssignWeak = BLResult function(BLFontDataCore* self, const(BLFontDataCore)* other);
    alias pblFontDataCreateFromFile = BLResult function(BLFontDataCore* self, const(char)* fileName, uint readFlags);
    alias pblFontDataCreateFromDataArray = BLResult function(BLFontDataCore* self, const(BLArrayCore)* dataArray);
    alias pblFontDataCreateFromData = BLResult function(BLFontDataCore* self, const(void)* data, size_t dataSize, BLDestroyImplFunc destroyFunc, void* destroyData);
    alias pblFontDataEquals = bool function(const(BLFontDataCore)* a, const(BLFontDataCore)* b);
    alias pblFontDataInit = BLResult function(BLFontDataCore* self);
    alias pblFontDataListTags = BLResult function(const(BLFontDataCore)* self, uint faceIndex, BLArrayCore* dst);
    alias pblFontDataQueryTables = size_t function(const(BLFontDataCore)* self, uint faceIndex, BLFontTable* dst, const(BLTag)* tags, size_t count);
    alias pblFontDataReset = BLResult function(BLFontDataCore* self);
    alias pblFontEquals = bool function(const(BLFontCore)* a, const(BLFontCore)* b);
    alias pblFontFaceAssignMove = BLResult function(BLFontFaceCore* self, BLFontFaceCore* other);
    alias pblFontFaceAssignWeak = BLResult function(BLFontFaceCore* self, const(BLFontFaceCore)* other);
    alias pblFontFaceCreateFromFile = BLResult function(BLFontFaceCore* self, const(char)* fileName, uint readFlags);
    alias pblFontFaceCreateFromData = BLResult function(BLFontFaceCore* self, const(BLFontDataCore)* fontData, uint faceIndex);
    alias pblFontFaceEquals = bool function(const(BLFontFaceCore)* a, const(BLFontFaceCore)* b);
    alias pblFontFaceGetDesignMetrics = BLResult function(const(BLFontFaceCore)* self, BLFontDesignMetrics* out_);
    alias pblFontFaceGetFaceInfo = BLResult function(const(BLFontFaceCore)* self, BLFontFaceInfo* out_);
    alias pblFontFaceGetUnicodeCoverage = BLResult function(const(BLFontFaceCore)* self, BLFontUnicodeCoverage* out_);
    alias pblFontFaceInit = BLResult function(BLFontFaceCore* self);
    alias pblFontFaceReset = BLResult function(BLFontFaceCore* self);
    alias pblFontGetDesignMetrics = BLResult function(const(BLFontCore)* self, BLFontDesignMetrics* out_);
    alias pblFontGetGlyphAdvances = BLResult function(const(BLFontCore)* self, const(void)* glyphIdData, intptr_t glyphIdAdvance, BLGlyphPlacement* out_, size_t count);
    alias pblFontGetGlyphBounds = BLResult function(const(BLFontCore)* self, const(void)* glyphIdData, intptr_t glyphIdAdvance, BLBoxI* out_, size_t count);
    alias pblFontGetGlyphOutlines = BLResult function(const(BLFontCore)* self, uint glyphId, const(BLMatrix2D)* userMatrix, BLPathCore* out_, BLPathSinkFunc sink, void* closure);
    alias pblFontGetGlyphRunOutlines = BLResult function(const(BLFontCore)* self, const(BLGlyphRun)* glyphRun, const(BLMatrix2D)* userMatrix, BLPathCore* out_, BLPathSinkFunc sink, void* closure);
    alias pblFontGetMatrix = BLResult function(const(BLFontCore)* self, BLFontMatrix* out_);
    alias pblFontGetMetrics = BLResult function(const(BLFontCore)* self, BLFontMetrics* out_);
    alias pblFontGetTextMetrics = BLResult function(const(BLFontCore)* self, BLGlyphBufferCore* gb, BLTextMetrics* out_);
    alias pblFontInit = BLResult function(BLFontCore* self);
    alias pblFontManagerInit = BLResult function(BLFontManagerCore* self);
    alias pblFontManagerReset = BLResult function(BLFontManagerCore* self);
    alias pblFontManagerAssignMove = BLResult function(BLFontManagerCore* self, BLFontManagerCore* other);
    alias pblFontManagerAssignWeak = BLResult function(BLFontManagerCore* self, const(BLFontManagerCore)* other);
    alias pblFontManagerEquals = bool function(const BLFontManagerCore* a, const(BLFontManagerCore)* b);
    alias pblFontMapTextToGlyphs = BLResult function(const(BLFontCore)* self, BLGlyphBufferCore* gb, BLGlyphMappingState* stateOut);
    alias pblFontPositionGlyphs = BLResult function(const(BLFontCore)* self, BLGlyphBufferCore* gb, uint positioningFlags);
    alias pblFontReset = BLResult function(BLFontCore* self);
    alias pblFontShape = BLResult function(const(BLFontCore)* self, BLGlyphBufferCore* gb);
    alias pblFormatInfoSanitize = BLResult function(BLFormatInfo* self);
    alias pblGlyphBufferClear = BLResult function(BLGlyphBufferCore* self);
    alias pblGlyphBufferGetFlags = uint function(const(BLGlyphBufferCore)* self);
    alias pblGlyphBufferGetGlyphRun = const(BLGlyphRun)* function(const(BLGlyphBufferCore)* self);
    alias pblGlyphBufferGetSize = size_t function(const(BLGlyphBufferCore)* self);
    alias pblGlyphBufferInit = BLResult function(BLGlyphBufferCore* self);
    alias pblGlyphBufferInitMove = BLResult function(BLGlyphBufferCore* self, BLGlyphBufferCore* other);
    alias pblGlyphBufferReset = BLResult function(BLGlyphBufferCore* self);
    alias pblGlyphBufferSetGlyphIds = BLResult function(BLGlyphBufferCore* self, const(void)* data, intptr_t advance, size_t size);
    alias pblGlyphBufferSetText = BLResult function(BLGlyphBufferCore* self, const(void)* data, size_t size, uint encoding);
    alias pblGradientAddStopRgba32 = BLResult function(BLGradientCore* self, double offset, uint argb32);
    alias pblGradientAddStopRgba64 = BLResult function(BLGradientCore* self, double offset, ulong argb64);
    alias pblGradientApplyMatrixOp = BLResult function(BLGradientCore* self, uint opType, const(void)* opData);
    alias pblGradientAssignMove = BLResult function(BLGradientCore* self, BLGradientCore* other);
    alias pblGradientAssignStops = BLResult function(BLGradientCore* self, const(BLGradientStop)* stops, size_t n);
    alias pblGradientAssignWeak = BLResult function(BLGradientCore* self, const(BLGradientCore)* other);
    alias pblGradientCreate = BLResult function(BLGradientCore* self, uint type, const(void)* values, uint extendMode, const(BLGradientStop)* stops, size_t n, const(BLMatrix2D)* m);
    alias pblGradientEquals = bool function(const(BLGradientCore)* a, const(BLGradientCore)* b);
    alias pblGradientGetCapacity = size_t function(const(BLGradientCore)* self);
    alias pblGradientGetExtendMode = uint function(BLGradientCore* self);
    alias pblGradientGetSize = size_t function(const(BLGradientCore)* self);
    alias pblGradientGetStops = const(BLGradientStop)* function(const(BLGradientCore)* self);
    alias pblGradientGetType = uint function(const(BLGradientCore)* self);
    alias pblGradientGetValue = double function(const(BLGradientCore)* self, size_t index);
    alias pblGradientIndexOfStop = size_t function(const(BLGradientCore)* self, double offset);
    alias pblGradientInit = BLResult function(BLGradientCore* self);
    alias pblGradientInitAs = BLResult function(BLGradientCore* self, uint type, const(void)* values, uint extendMode, const(BLGradientStop)* stops, size_t n, const(BLMatrix2D)* m);
    alias pblGradientRemoveStop = BLResult function(BLGradientCore* self, size_t index);
    alias pblGradientRemoveStopByOffset = BLResult function(BLGradientCore* self, double offset, uint all);
    alias pblGradientRemoveStops = BLResult function(BLGradientCore* self, size_t rStart, size_t rEnd);
    alias pblGradientRemoveStopsFromTo = BLResult function(BLGradientCore* self, double offsetMin, double offsetMax);
    alias pblGradientReplaceStopRgba32 = BLResult function(BLGradientCore* self, size_t index, double offset, uint rgba32);
    alias pblGradientReplaceStopRgba64 = BLResult function(BLGradientCore* self, size_t index, double offset, ulong rgba64);
    alias pblGradientReserve = BLResult function(BLGradientCore* self, size_t n);
    alias pblGradientReset = BLResult function(BLGradientCore* self);
    alias pblGradientResetStops = BLResult function(BLGradientCore* self);
    alias pblGradientSetExtendMode = BLResult function(BLGradientCore* self, uint extendMode);
    alias pblGradientSetType = BLResult function(BLGradientCore* self, uint type);
    alias pblGradientSetValue = BLResult function(BLGradientCore* self, size_t index, double value);
    alias pblGradientSetValues = BLResult function(BLGradientCore* self, size_t index, const(double)* values, size_t n);
    alias pblGradientShrink = BLResult function(BLGradientCore* self);
    alias pblImageAssignDeep = BLResult function(BLImageCore* self, const(BLImageCore)* other);
    alias pblImageAssignMove = BLResult function(BLImageCore* self, BLImageCore* other);
    alias pblImageAssignWeak = BLResult function(BLImageCore* self, const(BLImageCore)* other);
    alias pblImageCodecAddToBuiltIn = BLResult function(const(BLImageCodecCore)* codec);
    alias pblImageCodecArrayAssignBuiltInCodecs = BLResult function(BLArrayCore* self);
    alias pblImageCodecArrayInitBuiltInCodecs = BLResult function(BLArrayCore* self);
    alias pblImageCodecAssignWeak = BLResult function(BLImageCodecCore* self, const(BLImageCodecCore)* other);
    alias pblImageCodecCreateDecoder = BLResult function(const(BLImageCodecCore)* self, BLImageDecoderCore* dst);
    alias pblImageCodecCreateEncoder = BLResult function(const(BLImageCodecCore)* self, BLImageEncoderCore* dst);
    alias pblImageCodecFindByData = BLResult function(BLImageCodecCore* self, const(void)* data, size_t size, const(BLArrayCore)* codecs);
    alias pblImageCodecFindByName = BLResult function(BLImageCodecCore* self, const(char)* name, size_t size, const(BLArrayCore)* codecs);
    alias pblImageCodecInit = BLResult function(BLImageCodecCore* self);
    alias pblImageCodecInspectData = uint function(const(BLImageCodecCore)* self, const(void)* data, size_t size);
    alias pblImageCodecRemoveFromBuiltIn = BLResult function(const(BLImageCodecCore)* codec);
    alias pblImageCodecReset = BLResult function(BLImageCodecCore* self);
    alias pblImageCreate = BLResult function(BLImageCore* self, int w, int h, uint format);
    alias pblImageCreateFromData = BLResult function(BLImageCore* self, int w, int h, uint format, void* pixelData, intptr_t stride, BLDestroyImplFunc destroyFunc, void* destroyData);
    alias pblImageDecoderAssignMove = BLResult function(BLImageDecoderCore* self, BLImageDecoderCore* other);
    alias pblImageDecoderAssignWeak = BLResult function(BLImageDecoderCore* self, const(BLImageDecoderCore)* other);
    alias pblImageDecoderInit = BLResult function(BLImageDecoderCore* self);
    alias pblImageDecoderReadFrame = BLResult function(BLImageDecoderCore* self, BLImageCore* imageOut, const(ubyte)* data, size_t size);
    alias pblImageDecoderReadInfo = BLResult function(BLImageDecoderCore* self, BLImageInfo* infoOut, const(ubyte)* data, size_t size);
    alias pblImageDecoderReset = BLResult function(BLImageDecoderCore* self);
    alias pblImageDecoderRestart = BLResult function(BLImageDecoderCore* self);
    alias pblImageEncoderAssignMove = BLResult function(BLImageEncoderCore* self, BLImageEncoderCore* other);
    alias pblImageEncoderAssignWeak = BLResult function(BLImageEncoderCore* self, const(BLImageEncoderCore)* other);
    alias pblImageEncoderInit = BLResult function(BLImageEncoderCore* self);
    alias pblImageEncoderReset = BLResult function(BLImageEncoderCore* self);
    alias pblImageEncoderRestart = BLResult function(BLImageEncoderCore* self);
    alias pblImageEncoderWriteFrame = BLResult function(BLImageEncoderCore* self, BLArrayCore* dst, const(BLImageCore)* image);
    alias pblImageEquals = bool function(const(BLImageCore)* a, const(BLImageCore)* b);
    alias pblImageGetData = BLResult function(const(BLImageCore)* self, BLImageData* dataOut);
    alias pblImageInit = BLResult function(BLImageCore* self);
    alias pblImageInitAs = BLResult function(BLImageCore* self, int w, int h, uint format);
    alias pblImageInitAsFromData = BLResult function(BLImageCore* self, int w, int h, uint format, void* pixelData, intptr_t stride, BLDestroyImplFunc destroyFunc, void* destroyData);
    alias pblImageMakeMutable = BLResult function(BLImageCore* self, BLImageData* dataOut);
    alias pblImageConvert = BLResult function(BLImageCore* self, uint format);
    alias pblImageReadFromData = BLResult function(BLImageCore* self, const(void)* data, size_t size, const(BLArrayCore)* codecs);
    alias pblImageReadFromFile = BLResult function(BLImageCore* self, const(char)* fileName, const(BLArrayCore)* codecs);
    alias pblImageReset = BLResult function(BLImageCore* self);
    alias pblImageScale = BLResult function(BLImageCore* dst, const(BLImageCore)* src, const(BLSizeI)* size, uint filter, const(BLImageScaleOptions)* options);
    alias pblImageWriteToData = BLResult function(const(BLImageCore)* self, BLArrayCore* dst, const(BLImageCodecCore)* codec);
    alias pblImageWriteToFile = BLResult function(const(BLImageCore)* self, const(char)* fileName, const(BLImageCodecCore)* codec);
    alias pblMatrix2DApplyOp = BLResult function(BLMatrix2D* self, uint opType, const(void)* opData);
    alias pblMatrix2DGetType = uint function(const(BLMatrix2D)* self);
    alias pblMatrix2DInvert = BLResult function(BLMatrix2D* dst, const(BLMatrix2D)* src);
    alias pblMatrix2DMapPointDArray = BLResult function(const(BLMatrix2D)* self, BLPoint* dst, const(BLPoint)* src, size_t count);
    alias pblMatrix2DSetIdentity = BLResult function(BLMatrix2D* self);
    alias pblMatrix2DSetRotation = BLResult function(BLMatrix2D* self, double angle, double cx, double cy);
    alias pblMatrix2DSetScaling = BLResult function(BLMatrix2D* self, double x, double y);
    alias pblMatrix2DSetSkewing = BLResult function(BLMatrix2D* self, double x, double y);
    alias pblMatrix2DSetTranslation = BLResult function(BLMatrix2D* self, double x, double y);
    alias pblPathAddBoxD = BLResult function(BLPathCore* self, const(BLBox)* box, uint dir);
    alias pblPathAddBoxI = BLResult function(BLPathCore* self, const(BLBoxI)* box, uint dir);
    alias pblPathAddGeometry = BLResult function(BLPathCore* self, uint geometryType, const(void)* geometryData, const(BLMatrix2D)* m, uint dir);
    alias pblPathAddPath = BLResult function(BLPathCore* self, const(BLPathCore)* other, const(BLRange)* range);
    alias pblPathAddRectD = BLResult function(BLPathCore* self, const(BLRect)* rect, uint dir);
    alias pblPathAddRectI = BLResult function(BLPathCore* self, const(BLRectI)* rect, uint dir);
    alias pblPathAddReversedPath = BLResult function(BLPathCore* self, const(BLPathCore)* other, const(BLRange)* range, uint reverseMode);
    alias pblPathAddStrokedPath = BLResult function(BLPathCore* self, const(BLPathCore)* other, const(BLRange)* range, const(BLStrokeOptionsCore)* options, const(BLApproximationOptions)* approx);
    alias pblPathAddTransformedPath = BLResult function(BLPathCore* self, const(BLPathCore)* other, const(BLRange)* range, const(BLMatrix2D)* m);
    alias pblPathAddTranslatedPath = BLResult function(BLPathCore* self, const(BLPathCore)* other, const(BLRange)* range, const(BLPoint)* p);
    alias pblPathArcQuadrantTo = BLResult function(BLPathCore* self, double x1, double y1, double x2, double y2);
    alias pblPathArcTo = BLResult function(BLPathCore* self, double x, double y, double rx, double ry, double start, double sweep, bool forceMoveTo);
    alias pblPathAssignDeep = BLResult function(BLPathCore* self, const(BLPathCore)* other);
    alias pblPathAssignMove = BLResult function(BLPathCore* self, BLPathCore* other);
    alias pblPathAssignWeak = BLResult function(BLPathCore* self, const(BLPathCore)* other);
    alias pblPathClear = BLResult function(BLPathCore* self);
    alias pblPathClose = BLResult function(BLPathCore* self);
    alias pblPathCubicTo = BLResult function(BLPathCore* self, double x1, double y1, double x2, double y2, double x3, double y3);
    alias pblPathEllipticArcTo = BLResult function(BLPathCore* self, double rx, double ry, double xAxisRotation, bool largeArcFlag, bool sweepFlag, double x1, double y1);
    alias pblPathEquals = bool function(const(BLPathCore)* a, const(BLPathCore)* b);
    alias pblPathFitTo = BLResult function(BLPathCore* self, const(BLRange)* range, const(BLRect)* rect, uint fitFlags);
    alias pblPathGetBoundingBox = BLResult function(const(BLPathCore)* self, BLBox* boxOut);
    alias pblPathGetCapacity = size_t function(const(BLPathCore)* self);
    alias pblPathGetClosestVertex = BLResult function(const(BLPathCore)* self, const(BLPoint)* p, double maxDistance, size_t* indexOut, double* distanceOut);
    alias pblPathGetCommandData = const(ubyte)* function(const(BLPathCore)* self);
    alias pblPathGetControlBox = BLResult function(const(BLPathCore)* self, BLBox* boxOut);
    alias pblPathGetFigureRange = BLResult function(const(BLPathCore)* self, size_t index, BLRange* rangeOut);
    alias pblPathGetInfoFlags = BLResult function(const(BLPathCore)* self, uint* flagsOut);
    alias pblPathGetLastVertex = BLResult function(const(BLPathCore)* self, BLPoint* vtxOut);
    alias pblPathGetSize = size_t function(const(BLPathCore)* self);
    alias pblPathGetVertexData = const(BLPoint)* function(const(BLPathCore)* self);
    alias pblPathHitTest = uint function(const(BLPathCore)* self, const(BLPoint)* p, uint fillRule);
    alias pblPathInit = BLResult function(BLPathCore* self);
    alias pblPathLineTo = BLResult function(BLPathCore* self, double x1, double y1);
    alias pblPathModifyOp = BLResult function(BLPathCore* self, uint op, size_t n, ubyte** cmdDataOut, BLPoint** vtxDataOut);
    alias pblPathMoveTo = BLResult function(BLPathCore* self, double x0, double y0);
    alias pblPathPolyTo = BLResult function(BLPathCore* self, const(BLPoint)* poly, size_t count);
    alias pblPathQuadTo = BLResult function(BLPathCore* self, double x1, double y1, double x2, double y2);
    alias pblPathReserve = BLResult function(BLPathCore* self, size_t n);
    alias pblPathReset = BLResult function(BLPathCore* self);
    alias pblPathSetVertexAt = BLResult function(BLPathCore* self, size_t index, uint cmd, double x, double y);
    alias pblPathShrink = BLResult function(BLPathCore* self);
    alias pblPathSmoothCubicTo = BLResult function(BLPathCore* self, double x2, double y2, double x3, double y3);
    alias pblPathSmoothQuadTo = BLResult function(BLPathCore* self, double x2, double y2);
    alias pblPathTransform = BLResult function(BLPathCore* self, const(BLRange)* range, const(BLMatrix2D)* m);
    alias pblPathTranslate = BLResult function(BLPathCore* self, const(BLRange)* range, const(BLPoint)* p);
    alias pblPatternApplyMatrixOp = BLResult function(BLPatternCore* self, uint opType, const(void)* opData);
    alias pblPatternAssignDeep = BLResult function(BLPatternCore* self, const(BLPatternCore)* other);
    alias pblPatternAssignMove = BLResult function(BLPatternCore* self, BLPatternCore* other);
    alias pblPatternAssignWeak = BLResult function(BLPatternCore* self, const(BLPatternCore)* other);
    alias pblPatternCreate = BLResult function(BLPatternCore* self, const(BLImageCore)* image, const(BLRectI)* area, uint extendMode, const(BLMatrix2D)* m);
    alias pblPatternEquals = bool function(const(BLPatternCore)* a, const(BLPatternCore)* b);
    alias pblPatternInit = BLResult function(BLPatternCore* self);
    alias pblPatternInitAs = BLResult function(BLPatternCore* self, const(BLImageCore)* image, const(BLRectI)* area, uint extendMode, const(BLMatrix2D)* m);
    alias pblPatternReset = BLResult function(BLPatternCore* self);
    alias pblPatternSetArea = BLResult function(BLPatternCore* self, const(BLRectI)* area);
    alias pblPatternSetExtendMode = BLResult function(BLPatternCore* self, uint extendMode);
    alias pblPatternSetImage = BLResult function(BLPatternCore* self, const(BLImageCore)* image, const(BLRectI)* area);
    alias pblPixelConverterAssign = BLResult function(BLPixelConverterCore* self, const(BLPixelConverterCore)* other);
    alias pblPixelConverterConvert = BLResult function(const(BLPixelConverterCore)* self, void* dstData, intptr_t dstStride, const(void)* srcData, intptr_t srcStride, uint w, uint h, const(BLPixelConverterOptions)* options);
    alias pblPixelConverterCreate = BLResult function(BLPixelConverterCore* self, const(BLFormatInfo)* dstInfo, const(BLFormatInfo)* srcInfo, uint createFlags);
    alias pblPixelConverterInit = BLResult function(BLPixelConverterCore* self);
    alias pblPixelConverterInitWeak = BLResult function(BLPixelConverterCore* self, const(BLPixelConverterCore)* other);
    alias pblPixelConverterReset = BLResult function(BLPixelConverterCore* self);
    alias pblRandomNextDouble = double function(BLRandom* self);
    alias pblRandomNextUInt32 = uint function(BLRandom* self);
    alias pblRandomNextUInt64 = ulong function(BLRandom* self);
    alias pblRandomReset = BLResult function(BLRandom* self, ulong seed);
    alias pblRegionAssignBoxI = BLResult function(BLRegionCore* self, const(BLBoxI)* src);
    alias pblRegionAssignBoxIArray = BLResult function(BLRegionCore* self, const(BLBoxI)* data, size_t n);
    alias pblRegionAssignDeep = BLResult function(BLRegionCore* self, const(BLRegionCore)* other);
    alias pblRegionAssignMove = BLResult function(BLRegionCore* self, BLRegionCore* other);
    alias pblRegionAssignRectI = BLResult function(BLRegionCore* self, const(BLRectI)* rect);
    alias pblRegionAssignRectIArray = BLResult function(BLRegionCore* self, const(BLRectI)* data, size_t n);
    alias pblRegionAssignWeak = BLResult function(BLRegionCore* self, const(BLRegionCore)* other);
    alias pblRegionClear = BLResult function(BLRegionCore* self);
    alias pblRegionCombine = BLResult function(BLRegionCore* self, const(BLRegionCore)* a, const(BLRegionCore)* b, uint booleanOp);
    alias pblRegionCombineBB = BLResult function(BLRegionCore* self, const(BLBoxI)* a, const(BLBoxI)* b, uint booleanOp);
    alias pblRegionCombineBR = BLResult function(BLRegionCore* self, const(BLBoxI)* a, const(BLRegionCore)* b, uint booleanOp);
    alias pblRegionCombineRB = BLResult function(BLRegionCore* self, const(BLRegionCore)* a, const(BLBoxI)* b, uint booleanOp);
    alias pblRegionEquals = bool function(const(BLRegionCore)* a, const(BLRegionCore)* b);
    alias pblRegionGetCapacity = size_t function(const(BLRegionCore)* self);
    alias pblRegionGetData = const(BLBoxI)* function(const(BLRegionCore)* self);
    alias pblRegionGetSize = size_t function(const(BLRegionCore)* self);
    alias pblRegionGetType = uint function(const(BLRegionCore)* self);
    alias pblRegionHitTest = uint function(const(BLRegionCore)* self, const(BLPointI)* pt);
    alias pblRegionHitTestBoxI = uint function(const(BLRegionCore)* self, const(BLBoxI)* box);
    alias pblRegionInit = BLResult function(BLRegionCore* self);
    alias pblRegionIntersectAndClip = BLResult function(BLRegionCore* self, const(BLRegionCore)* a, const(BLRegionCore)* b, const(BLBoxI)* clipBox);
    alias pblRegionReserve = BLResult function(BLRegionCore* self, size_t n);
    alias pblRegionReset = BLResult function(BLRegionCore* self);
    alias pblRegionShrink = BLResult function(BLRegionCore* self);
    alias pblRegionTranslate = BLResult function(BLRegionCore* self, const(BLRegionCore)* r, const(BLPointI)* pt);
    alias pblRegionTranslateAndClip = BLResult function(BLRegionCore* self, const(BLRegionCore)* r, const(BLPointI)* pt, const(BLBoxI)* clipBox);
    alias pblResultFromWinError = BLResult function(uint e);
    alias pblRuntimeAssertionFailure = void function(const(char)* file, int line, const(char)* msg);
    alias pblRuntimeCleanup = BLResult function(uint cleanupFlags);
    alias pblRuntimeGetTickCount = uint function();
    alias pblRuntimeInit = BLResult function();
    alias pblRuntimeMessageFmt = BLResult function(const(char)* fmt, ...);
    alias pblRuntimeMessageOut = BLResult function(const(char)* msg);
    alias pblRuntimeMessageVFmt = BLResult function(const(char)* fmt, va_list ap);
    alias pblRuntimeQueryInfo = BLResult function(uint infoType, void* infoOut);
    alias pblRuntimeShutdown = BLResult function();
    alias pblStringApplyOpChar = BLResult function(BLStringCore* self, uint op, char c, size_t n);
    alias pblStringApplyOpData = BLResult function(BLStringCore* self, uint op, const(char)* str, size_t n);
    alias pblStringApplyOpFormat = BLResult function(BLStringCore* self, uint op, const(char)* fmt, ...);
    alias pblStringApplyOpFormatV = BLResult function(BLStringCore* self, uint op, const(char)* fmt, va_list ap);
    alias pblStringApplyOpString = BLResult function(BLStringCore* self, uint op, const(BLStringCore)* other);
    alias pblStringAssignData = BLResult function(BLStringCore* self, const(char)* str, size_t n);
    alias pblStringAssignDeep = BLResult function(BLStringCore* self, const(BLStringCore)* other);
    alias pblStringAssignMove = BLResult function(BLStringCore* self, BLStringCore* other);
    alias pblStringAssignWeak = BLResult function(BLStringCore* self, const(BLStringCore)* other);
    alias pblStringClear = BLResult function(BLStringCore* self);
    alias pblStringCompare = int function(const(BLStringCore)* self, const(BLStringCore)* other);
    alias pblStringCompareData = int function(const(BLStringCore)* self, const(char)* str, size_t n);
    alias pblStringEquals = bool function(const(BLStringCore)* self, const(BLStringCore)* other);
    alias pblStringEqualsData = bool function(const(BLStringCore)* self, const(char)* str, size_t n);
    alias pblStringGetCapacity = size_t function(const(BLStringCore)* self);
    alias pblStringGetData = const(char)* function(const(BLStringCore)* self);
    alias pblStringGetSize = size_t function(const(BLStringCore)* self);
    alias pblStringInit = BLResult function(BLStringCore* self);
    alias pblStringInsertChar = BLResult function(BLStringCore* self, size_t index, char c, size_t n);
    alias pblStringInsertData = BLResult function(BLStringCore* self, size_t index, const(char)* str, size_t n);
    alias pblStringInsertOp = BLResult function(BLStringCore* self, size_t index, size_t n, char** dataOut);
    alias pblStringInsertString = BLResult function(BLStringCore* self, size_t index, const(BLStringCore)* other);
    alias pblStringMakeMutable = BLResult function(BLStringCore* self, char** dataOut);
    alias pblStringModifyOp = BLResult function(BLStringCore* self, uint op, size_t n, char** dataOut);
    alias pblStringRemoveRange = BLResult function(BLStringCore* self, size_t rStart, size_t rEnd);
    alias pblStringReserve = BLResult function(BLStringCore* self, size_t n);
    alias pblStringReset = BLResult function(BLStringCore* self);
    alias pblStringResize = BLResult function(BLStringCore* self, size_t n, char fill);
    alias pblStringShrink = BLResult function(BLStringCore* self);
    alias pblStrokeOptionsAssignMove = BLResult function(BLStrokeOptionsCore* self, BLStrokeOptionsCore* other);
    alias pblStrokeOptionsAssignWeak = BLResult function(BLStrokeOptionsCore* self, const(BLStrokeOptionsCore)* other);
    alias pblStrokeOptionsInit = BLResult function(BLStrokeOptionsCore* self);
    alias pblStrokeOptionsInitMove = BLResult function(BLStrokeOptionsCore* self, BLStrokeOptionsCore* other);
    alias pblStrokeOptionsInitWeak = BLResult function(BLStrokeOptionsCore* self, const(BLStrokeOptionsCore)* other);
    alias pblStrokeOptionsReset = BLResult function(BLStrokeOptionsCore* self);
    alias pblVariantAssignMove = BLResult function(void* self, void* other);
    alias pblVariantAssignWeak = BLResult function(void* self, const(void)* other);
    alias pblVariantEquals = bool function(const(void)* a, const(void)* b);
    alias pblVariantGetImplType = uint function(const(void)* self);
    alias pblVariantInit = BLResult function(void* self);
    alias pblVariantInitMove = BLResult function(void* self, void* other);
    alias pblVariantInitWeak = BLResult function(void* self, const(void)* other);
    alias pblVariantReset = BLResult function(void* self);
}

 __gshared {
    pblDefaultApproximationOptions blDefaultApproximationOptions;
    pblFormatInfo blFormatInfo;
    pblMatrix2DMapPointDArrayFuncs blMatrix2DMapPointDArrayFuncs;
    pblNone blNone;

    //pblRuntimeAllocImpl blRuntimeAllocImpl;
    //pblRuntimeFreeImpl blRuntimeFreeImpl;

    pblArrayAppendF32 blArrayAppendF32;
    pblArrayAppendF64 blArrayAppendF64;
    pblArrayAppendItem blArrayAppendItem;
    pblArrayAppendU16 blArrayAppendU16;
    pblArrayAppendU32 blArrayAppendU32;
    pblArrayAppendU64 blArrayAppendU64;
    pblArrayAppendU8 blArrayAppendU8;
    pblArrayAppendView blArrayAppendView;
    pblArrayAssignDeep blArrayAssignDeep;
    pblArrayAssignMove blArrayAssignMove;
    pblArrayAssignView blArrayAssignView;
    pblArrayAssignWeak blArrayAssignWeak;
    pblArrayClear blArrayClear;
    pblArrayCreateFromData blArrayCreateFromData;
    pblArrayEquals blArrayEquals;
    pblArrayGetCapacity blArrayGetCapacity;
    pblArrayGetData blArrayGetData;
    pblArrayGetSize blArrayGetSize;
    pblArrayInit blArrayInit;
    pblArrayInsertF32 blArrayInsertF32;
    pblArrayInsertF64 blArrayInsertF64;
    pblArrayInsertItem blArrayInsertItem;
    pblArrayInsertOp blArrayInsertOp;
    pblArrayInsertU16 blArrayInsertU16;
    pblArrayInsertU32 blArrayInsertU32;
    pblArrayInsertU64 blArrayInsertU64;
    pblArrayInsertU8 blArrayInsertU8;
    pblArrayInsertView blArrayInsertView;
    pblArrayMakeMutable blArrayMakeMutable;
    pblArrayModifyOp blArrayModifyOp;
    pblArrayRemoveIndex blArrayRemoveIndex;
    pblArrayRemoveRange blArrayRemoveRange;
    pblArrayReplaceF32 blArrayReplaceF32;
    pblArrayReplaceF64 blArrayReplaceF64;
    pblArrayReplaceItem blArrayReplaceItem;
    pblArrayReplaceU16 blArrayReplaceU16;
    pblArrayReplaceU32 blArrayReplaceU32;
    pblArrayReplaceU64 blArrayReplaceU64;
    pblArrayReplaceU8 blArrayReplaceU8;
    pblArrayReplaceView blArrayReplaceView;
    pblArrayReserve blArrayReserve;
    pblArrayReset blArrayReset;
    pblArrayResize blArrayResize;
    pblArrayShrink blArrayShrink;
    pblContextAssignMove blContextAssignMove;
    pblContextAssignWeak blContextAssignWeak;
    pblContextBegin blContextBegin;
    pblContextBlitImageD blContextBlitImageD;
    pblContextBlitImageI blContextBlitImageI;
    pblContextBlitScaledImageD blContextBlitScaledImageD;
    pblContextBlitScaledImageI blContextBlitScaledImageI;
    pblContextClearAll blContextClearAll;
    pblContextClearRectD blContextClearRectD;
    pblContextClearRectI blContextClearRectI;
    pblContextClipToRectD blContextClipToRectD;
    pblContextClipToRectI blContextClipToRectI;
    pblContextEnd blContextEnd;
    pblContextFillAll blContextFillAll;
    pblContextFillGeometry blContextFillGeometry;
    pblContextFillGlyphRunD blContextFillGlyphRunD;
    pblContextFillGlyphRunI blContextFillGlyphRunI;
    pblContextFillPathD blContextFillPathD;
    pblContextFillRectD blContextFillRectD;
    pblContextFillRectI blContextFillRectI;
    pblContextFillTextD blContextFillTextD;
    pblContextFillTextI blContextFillTextI;
    pblContextFlush blContextFlush;
    pblContextGetFillStyle blContextGetFillStyle;
    pblContextGetFillStyleRgba32 blContextGetFillStyleRgba32;
    pblContextGetFillStyleRgba64 blContextGetFillStyleRgba64;
    pblContextGetMetaMatrix blContextGetMetaMatrix;
    pblContextGetStrokeOptions blContextGetStrokeOptions;
    pblContextGetStrokeStyle blContextGetStrokeStyle;
    pblContextGetStrokeStyleRgba32 blContextGetStrokeStyleRgba32;
    pblContextGetStrokeStyleRgba64 blContextGetStrokeStyleRgba64;
    pblContextGetType blContextGetType;
    pblContextGetUserMatrix blContextGetUserMatrix;
    pblContextInit blContextInit;
    pblContextInitAs blContextInitAs;
    pblContextMatrixOp blContextMatrixOp;
    pblContextReset blContextReset;
    pblContextRestore blContextRestore;
    pblContextRestoreClipping blContextRestoreClipping;
    pblContextSave blContextSave;
    pblContextSetApproximationOptions blContextSetApproximationOptions;
    pblContextSetCompOp blContextSetCompOp;
    pblContextSetFillAlpha blContextSetFillAlpha;
    pblContextSetFillRule blContextSetFillRule;
    pblContextSetFillStyle blContextSetFillStyle;
    pblContextSetFillStyleRgba32 blContextSetFillStyleRgba32;
    pblContextSetFillStyleRgba64 blContextSetFillStyleRgba64;
    pblContextSetFlattenMode blContextSetFlattenMode;
    pblContextSetFlattenTolerance blContextSetFlattenTolerance;
    pblContextSetGlobalAlpha blContextSetGlobalAlpha;
    pblContextSetHint blContextSetHint;
    pblContextSetHints blContextSetHints;
    pblContextSetStrokeAlpha blContextSetStrokeAlpha;
    pblContextSetStrokeCap blContextSetStrokeCap;
    pblContextSetStrokeCaps blContextSetStrokeCaps;
    pblContextSetStrokeDashArray blContextSetStrokeDashArray;
    pblContextSetStrokeDashOffset blContextSetStrokeDashOffset;
    pblContextSetStrokeJoin blContextSetStrokeJoin;
    pblContextSetStrokeMiterLimit blContextSetStrokeMiterLimit;
    pblContextSetStrokeOptions blContextSetStrokeOptions;
    pblContextSetStrokeStyle blContextSetStrokeStyle;
    pblContextSetStrokeStyleRgba32 blContextSetStrokeStyleRgba32;
    pblContextSetStrokeStyleRgba64 blContextSetStrokeStyleRgba64;
    pblContextSetStrokeTransformOrder blContextSetStrokeTransformOrder;
    pblContextSetStrokeWidth blContextSetStrokeWidth;
    pblContextStrokeGeometry blContextStrokeGeometry;
    pblContextStrokeGlyphRunD blContextStrokeGlyphRunD;
    pblContextStrokeGlyphRunI blContextStrokeGlyphRunI;
    pblContextStrokePathD blContextStrokePathD;
    pblContextStrokeRectD blContextStrokeRectD;
    pblContextStrokeRectI blContextStrokeRectI;
    pblContextStrokeTextD blContextStrokeTextD;
    pblContextStrokeTextI blContextStrokeTextI;
    pblContextUserToMeta blContextUserToMeta;
    pblFileClose blFileClose;
    pblFileGetSize blFileGetSize;
    pblFileInit blFileInit;
    pblFileOpen blFileOpen;
    pblFileRead blFileRead;
    pblFileReset blFileReset;
    pblFileSeek blFileSeek;
    pblFileSystemReadFile blFileSystemReadFile;
    pblFileSystemWriteFile blFileSystemWriteFile;
    pblFileTruncate blFileTruncate;
    pblFileWrite blFileWrite;
    pblFontApplyGPos blFontApplyGPos;
    pblFontApplyGSub blFontApplyGSub;
    pblFontApplyKerning blFontApplyKerning;
    pblFontAssignMove blFontAssignMove;
    pblFontAssignWeak blFontAssignWeak;
    pblFontCreateFromFace blFontCreateFromFace;
    pblFontDataAssignMove blFontDataAssignMove;
    pblFontDataAssignWeak blFontDataAssignWeak;
    pblFontDataCreateFromFile blFontDataCreateFromFile;
    pblFontDataCreateFromDataArray blFontDataCreateFromDataArray;
    pblFontDataCreateFromData blFontDataCreateFromData;
    pblFontDataEquals blFontDataEquals;
    pblFontDataInit blFontDataInit;
    pblFontDataListTags blFontDataListTags;
    pblFontDataQueryTables blFontDataQueryTables;
    pblFontDataReset blFontDataReset;
    pblFontEquals blFontEquals;
    pblFontFaceAssignMove blFontFaceAssignMove;
    pblFontFaceAssignWeak blFontFaceAssignWeak;
    pblFontFaceCreateFromFile blFontFaceCreateFromFile;
    pblFontFaceCreateFromData blFontFaceCreateFromData;
    pblFontFaceEquals blFontFaceEquals;
    pblFontFaceGetDesignMetrics blFontFaceGetDesignMetrics;
    pblFontFaceGetFaceInfo blFontFaceGetFaceInfo;
    pblFontFaceGetUnicodeCoverage blFontFaceGetUnicodeCoverage;
    pblFontFaceInit blFontFaceInit;
    pblFontFaceReset blFontFaceReset;
    pblFontGetDesignMetrics blFontGetDesignMetrics;
    pblFontGetGlyphAdvances blFontGetGlyphAdvances;
    pblFontGetGlyphBounds blFontGetGlyphBounds;
    pblFontGetGlyphOutlines blFontGetGlyphOutlines;
    pblFontGetGlyphRunOutlines blFontGetGlyphRunOutlines;
    pblFontGetMatrix blFontGetMatrix;
    pblFontGetMetrics blFontGetMetrics;
    pblFontGetTextMetrics blFontGetTextMetrics;
    pblFontInit blFontInit;
    pblFontManagerInit blFontManagerInit;
    pblFontManagerReset blFontManagerReset;
    pblFontManagerAssignMove blFontManagerAssignMove;
    pblFontManagerAssignWeak blFontManagerAssignWeak;
    pblFontManagerEquals blFontManagerEquals;
    pblFontMapTextToGlyphs blFontMapTextToGlyphs;
    pblFontPositionGlyphs blFontPositionGlyphs;
    pblFontReset blFontReset;
    pblFontShape blFontShape;
    pblFormatInfoSanitize blFormatInfoSanitize;
    pblGlyphBufferClear blGlyphBufferClear;
    pblGlyphBufferGetFlags blGlyphBufferGetFlags;
    pblGlyphBufferGetGlyphRun blGlyphBufferGetGlyphRun;
    pblGlyphBufferGetSize blGlyphBufferGetSize;
    pblGlyphBufferInit blGlyphBufferInit;
    pblGlyphBufferInitMove blGlyphBufferInitMove;
    pblGlyphBufferReset blGlyphBufferReset;
    pblGlyphBufferSetGlyphIds blGlyphBufferSetGlyphIds;
    pblGlyphBufferSetText blGlyphBufferSetText;
    pblGradientAddStopRgba32 blGradientAddStopRgba32;
    pblGradientAddStopRgba64 blGradientAddStopRgba64;
    pblGradientApplyMatrixOp blGradientApplyMatrixOp;
    pblGradientAssignMove blGradientAssignMove;
    pblGradientAssignStops blGradientAssignStops;
    pblGradientAssignWeak blGradientAssignWeak;
    pblGradientCreate blGradientCreate;
    pblGradientEquals blGradientEquals;
    pblGradientGetCapacity blGradientGetCapacity;
    pblGradientGetExtendMode blGradientGetExtendMode;
    pblGradientGetSize blGradientGetSize;
    pblGradientGetStops blGradientGetStops;
    pblGradientGetType blGradientGetType;
    pblGradientGetValue blGradientGetValue;
    pblGradientIndexOfStop blGradientIndexOfStop;
    pblGradientInit blGradientInit;
    pblGradientInitAs blGradientInitAs;
    pblGradientRemoveStop blGradientRemoveStop;
    pblGradientRemoveStopByOffset blGradientRemoveStopByOffset;
    pblGradientRemoveStops blGradientRemoveStops;
    pblGradientRemoveStopsFromTo blGradientRemoveStopsFromTo;
    pblGradientReplaceStopRgba32 blGradientReplaceStopRgba32;
    pblGradientReplaceStopRgba64 blGradientReplaceStopRgba64;
    pblGradientReserve blGradientReserve;
    pblGradientReset blGradientReset;
    pblGradientResetStops blGradientResetStops;
    pblGradientSetExtendMode blGradientSetExtendMode;
    pblGradientSetType blGradientSetType;
    pblGradientSetValue blGradientSetValue;
    pblGradientSetValues blGradientSetValues;
    pblGradientShrink blGradientShrink;
    pblImageAssignDeep blImageAssignDeep;
    pblImageAssignMove blImageAssignMove;
    pblImageAssignWeak blImageAssignWeak;
    pblImageCodecAddToBuiltIn blImageCodecAddToBuiltIn;
    pblImageCodecArrayAssignBuiltInCodecs blImageCodecArrayAssignBuiltInCodecs;
    pblImageCodecArrayInitBuiltInCodecs blImageCodecArrayInitBuiltInCodecs;
    pblImageCodecAssignWeak blImageCodecAssignWeak;
    pblImageCodecCreateDecoder blImageCodecCreateDecoder;
    pblImageCodecCreateEncoder blImageCodecCreateEncoder;
    pblImageCodecFindByData blImageCodecFindByData;
    pblImageCodecFindByName blImageCodecFindByName;
    pblImageCodecInit blImageCodecInit;
    pblImageCodecInspectData blImageCodecInspectData;
    pblImageCodecRemoveFromBuiltIn blImageCodecRemoveFromBuiltIn;
    pblImageCodecReset blImageCodecReset;
    pblImageCreate blImageCreate;
    pblImageCreateFromData blImageCreateFromData;
    pblImageDecoderAssignMove blImageDecoderAssignMove;
    pblImageDecoderAssignWeak blImageDecoderAssignWeak;
    pblImageDecoderInit blImageDecoderInit;
    pblImageDecoderReadFrame blImageDecoderReadFrame;
    pblImageDecoderReadInfo blImageDecoderReadInfo;
    pblImageDecoderReset blImageDecoderReset;
    pblImageDecoderRestart blImageDecoderRestart;
    pblImageEncoderAssignMove blImageEncoderAssignMove;
    pblImageEncoderAssignWeak blImageEncoderAssignWeak;
    pblImageEncoderInit blImageEncoderInit;
    pblImageEncoderReset blImageEncoderReset;
    pblImageEncoderRestart blImageEncoderRestart;
    pblImageEncoderWriteFrame blImageEncoderWriteFrame;
    pblImageEquals blImageEquals;
    pblImageGetData blImageGetData;
    pblImageInit blImageInit;
    pblImageInitAs blImageInitAs;
    pblImageInitAsFromData blImageInitAsFromData;
    pblImageMakeMutable blImageMakeMutable;
    pblImageConvert blImageConvert;
    pblImageReadFromData blImageReadFromData;
    pblImageReadFromFile blImageReadFromFile;
    pblImageReset blImageReset;
    pblImageScale blImageScale;
    pblImageWriteToData blImageWriteToData;
    pblImageWriteToFile blImageWriteToFile;
    pblMatrix2DApplyOp blMatrix2DApplyOp;
    pblMatrix2DGetType blMatrix2DGetType;
    pblMatrix2DInvert blMatrix2DInvert;
    pblMatrix2DMapPointDArray blMatrix2DMapPointDArray;
    pblMatrix2DSetIdentity blMatrix2DSetIdentity;
    pblMatrix2DSetRotation blMatrix2DSetRotation;
    pblMatrix2DSetScaling blMatrix2DSetScaling;
    pblMatrix2DSetSkewing blMatrix2DSetSkewing;
    pblMatrix2DSetTranslation blMatrix2DSetTranslation;
    pblPathAddBoxD blPathAddBoxD;
    pblPathAddBoxI blPathAddBoxI;
    pblPathAddGeometry blPathAddGeometry;
    pblPathAddPath blPathAddPath;
    pblPathAddRectD blPathAddRectD;
    pblPathAddRectI blPathAddRectI;
    pblPathAddReversedPath blPathAddReversedPath;
    pblPathAddStrokedPath blPathAddStrokedPath;
    pblPathAddTransformedPath blPathAddTransformedPath;
    pblPathAddTranslatedPath blPathAddTranslatedPath;
    pblPathArcQuadrantTo blPathArcQuadrantTo;
    pblPathArcTo blPathArcTo;
    pblPathAssignDeep blPathAssignDeep;
    pblPathAssignMove blPathAssignMove;
    pblPathAssignWeak blPathAssignWeak;
    pblPathClear blPathClear;
    pblPathClose blPathClose;
    pblPathCubicTo blPathCubicTo;
    pblPathEllipticArcTo blPathEllipticArcTo;
    pblPathEquals blPathEquals;
    pblPathFitTo blPathFitTo;
    pblPathGetBoundingBox blPathGetBoundingBox;
    pblPathGetCapacity blPathGetCapacity;
    pblPathGetClosestVertex blPathGetClosestVertex;
    pblPathGetCommandData blPathGetCommandData;
    pblPathGetControlBox blPathGetControlBox;
    pblPathGetFigureRange blPathGetFigureRange;
    pblPathGetInfoFlags blPathGetInfoFlags;
    pblPathGetLastVertex blPathGetLastVertex;
    pblPathGetSize blPathGetSize;
    pblPathGetVertexData blPathGetVertexData;
    pblPathHitTest blPathHitTest;
    pblPathInit blPathInit;
    pblPathLineTo blPathLineTo;
    pblPathModifyOp blPathModifyOp;
    pblPathMoveTo blPathMoveTo;
    pblPathPolyTo blPathPolyTo;
    pblPathQuadTo blPathQuadTo;
    pblPathReserve blPathReserve;
    pblPathReset blPathReset;
    pblPathSetVertexAt blPathSetVertexAt;
    pblPathShrink blPathShrink;
    pblPathSmoothCubicTo blPathSmoothCubicTo;
    pblPathSmoothQuadTo blPathSmoothQuadTo;
    pblPathTransform blPathTransform;
    pblPathTranslate blPathTranslate;
    pblPatternApplyMatrixOp blPatternApplyMatrixOp;
    pblPatternAssignDeep blPatternAssignDeep;
    pblPatternAssignMove blPatternAssignMove;
    pblPatternAssignWeak blPatternAssignWeak;
    pblPatternCreate blPatternCreate;
    pblPatternEquals blPatternEquals;
    pblPatternInit blPatternInit;
    pblPatternInitAs blPatternInitAs;
    pblPatternReset blPatternReset;
    pblPatternSetArea blPatternSetArea;
    pblPatternSetExtendMode blPatternSetExtendMode;
    pblPatternSetImage blPatternSetImage;
    pblPixelConverterAssign blPixelConverterAssign;
    pblPixelConverterConvert blPixelConverterConvert;
    pblPixelConverterCreate blPixelConverterCreate;
    pblPixelConverterInit blPixelConverterInit;
    pblPixelConverterInitWeak blPixelConverterInitWeak;
    pblPixelConverterReset blPixelConverterReset;
    pblRandomNextDouble blRandomNextDouble;
    pblRandomNextUInt32 blRandomNextUInt32;
    pblRandomNextUInt64 blRandomNextUInt64;
    pblRandomReset blRandomReset;
    pblRegionAssignBoxI blRegionAssignBoxI;
    pblRegionAssignBoxIArray blRegionAssignBoxIArray;
    pblRegionAssignDeep blRegionAssignDeep;
    pblRegionAssignMove blRegionAssignMove;
    pblRegionAssignRectI blRegionAssignRectI;
    pblRegionAssignRectIArray blRegionAssignRectIArray;
    pblRegionAssignWeak blRegionAssignWeak;
    pblRegionClear blRegionClear;
    pblRegionCombine blRegionCombine;
    pblRegionCombineBB blRegionCombineBB;
    pblRegionCombineBR blRegionCombineBR;
    pblRegionCombineRB blRegionCombineRB;
    pblRegionEquals blRegionEquals;
    pblRegionGetCapacity blRegionGetCapacity;
    pblRegionGetData blRegionGetData;
    pblRegionGetSize blRegionGetSize;
    pblRegionGetType blRegionGetType;
    pblRegionHitTest blRegionHitTest;
    pblRegionHitTestBoxI blRegionHitTestBoxI;
    pblRegionInit blRegionInit;
    pblRegionIntersectAndClip blRegionIntersectAndClip;
    pblRegionReserve blRegionReserve;
    pblRegionReset blRegionReset;
    pblRegionShrink blRegionShrink;
    pblRegionTranslate blRegionTranslate;
    pblRegionTranslateAndClip blRegionTranslateAndClip;
    pblResultFromWinError blResultFromWinError;
    pblRuntimeAssertionFailure blRuntimeAssertionFailure;
    pblRuntimeCleanup blRuntimeCleanup;
    pblRuntimeGetTickCount blRuntimeGetTickCount;
    pblRuntimeInit blRuntimeInit;
    pblRuntimeMessageFmt blRuntimeMessageFmt;
    pblRuntimeMessageOut blRuntimeMessageOut;
    pblRuntimeMessageVFmt blRuntimeMessageVFmt;
    pblRuntimeQueryInfo blRuntimeQueryInfo;
    pblRuntimeShutdown blRuntimeShutdown;
    pblStringApplyOpChar blStringApplyOpChar;
    pblStringApplyOpData blStringApplyOpData;
    pblStringApplyOpFormat blStringApplyOpFormat;
    pblStringApplyOpFormatV blStringApplyOpFormatV;
    pblStringApplyOpString blStringApplyOpString;
    pblStringAssignData blStringAssignData;
    pblStringAssignDeep blStringAssignDeep;
    pblStringAssignMove blStringAssignMove;
    pblStringAssignWeak blStringAssignWeak;
    pblStringClear blStringClear;
    pblStringCompare blStringCompare;
    pblStringCompareData blStringCompareData;
    pblStringEquals blStringEquals;
    pblStringEqualsData blStringEqualsData;
    pblStringGetCapacity blStringGetCapacity;
    pblStringGetData blStringGetData;
    pblStringGetSize blStringGetSize;
    pblStringInit blStringInit;
    pblStringInsertChar blStringInsertChar;
    pblStringInsertData blStringInsertData;
    pblStringInsertOp blStringInsertOp;
    pblStringInsertString blStringInsertString;
    pblStringMakeMutable blStringMakeMutable;
    pblStringModifyOp blStringModifyOp;
    pblStringRemoveRange blStringRemoveRange;
    pblStringReserve blStringReserve;
    pblStringReset blStringReset;
    pblStringResize blStringResize;
    pblStringShrink blStringShrink;
    pblStrokeOptionsAssignMove blStrokeOptionsAssignMove;
    pblStrokeOptionsAssignWeak blStrokeOptionsAssignWeak;
    pblStrokeOptionsInit blStrokeOptionsInit;
    pblStrokeOptionsInitMove blStrokeOptionsInitMove;
    pblStrokeOptionsInitWeak blStrokeOptionsInitWeak;
    pblStrokeOptionsReset blStrokeOptionsReset;
    pblVariantAssignMove blVariantAssignMove;
    pblVariantAssignWeak blVariantAssignWeak;
    pblVariantEquals blVariantEquals;
    pblVariantGetImplType blVariantGetImplType;
    pblVariantInit blVariantInit;
    pblVariantInitMove blVariantInitMove;
    pblVariantInitWeak blVariantInitWeak;
    pblVariantReset blVariantReset;
}

private {
    SharedLib lib;
    Blend2DSupport loadedVersion;
}

@nogc nothrow:

void unloadGLFW()
{
    if(lib != invalidHandle) {
        lib.unload();
    }
}

Blend2DSupport loadedBlend2DVersion() @safe
{
    return loadedVersion;
}

bool isBlend2DLoaded() @safe
{
    return lib != invalidHandle;
}

Blend2DSupport loadBlend2D()
{
    version(Windows) {
        const(char)[][1] libNames = ["blend2d.dll"];
    }
    else version(OSX) {
        const(char)[][2] libNames = [
            "blend2d.dylib"
        ];
    }
    else version(Posix) {
        const(char)[][4] libNames = [
            "blend2d.so"
        ];
    }
    else static assert(0, "bindbc-blend2d is not yet supported on this platform.");

    Blend2DSupport ret;
    foreach(name; libNames) {
        ret = loadBlend2D(name.ptr);
        if(ret != Blend2DSupport.noLibrary) break;
    }
    return ret;
}

Blend2DSupport loadBlend2D(const(char)* libName)
{
    lib = load(libName);
    if(lib == invalidHandle) {
        return Blend2DSupport.noLibrary;
    }

    auto errCount = errorCount();
    loadedVersion = Blend2DSupport.badLibrary;

    lib.bindSymbol(cast(void**)&blDefaultApproximationOptions, "blDefaultApproximationOptions");
    lib.bindSymbol(cast(void**)&blFormatInfo, "blFormatInfo");
    lib.bindSymbol(cast(void**)&blMatrix2DMapPointDArrayFuncs, "blMatrix2DMapPointDArrayFuncs");
    lib.bindSymbol(cast(void**)&blNone, "blNone");

    //lib.bindSymbol_stdcall(blRuntimeAllocImpl, "blRuntimeAllocImpl");
    //lib.bindSymbol_stdcall(blRuntimeFreeImpl, "blRuntimeFreeImpl");

    lib.bindSymbol_stdcall(blArrayAppendF32, "blArrayAppendF32");
    lib.bindSymbol_stdcall(blArrayAppendF64, "blArrayAppendF64");
    lib.bindSymbol_stdcall(blArrayAppendItem, "blArrayAppendItem");
    lib.bindSymbol_stdcall(blArrayAppendU16, "blArrayAppendU16");
    lib.bindSymbol_stdcall(blArrayAppendU32, "blArrayAppendU32");
    lib.bindSymbol_stdcall(blArrayAppendU64, "blArrayAppendU64");
    lib.bindSymbol_stdcall(blArrayAppendU8, "blArrayAppendU8");
    lib.bindSymbol_stdcall(blArrayAppendView, "blArrayAppendView");
    lib.bindSymbol_stdcall(blArrayAssignDeep, "blArrayAssignDeep");
    lib.bindSymbol_stdcall(blArrayAssignMove, "blArrayAssignMove");
    lib.bindSymbol_stdcall(blArrayAssignView, "blArrayAssignView");
    lib.bindSymbol_stdcall(blArrayAssignWeak, "blArrayAssignWeak");
    lib.bindSymbol_stdcall(blArrayClear, "blArrayClear");
    lib.bindSymbol_stdcall(blArrayCreateFromData, "blArrayCreateFromData");
    lib.bindSymbol_stdcall(blArrayEquals, "blArrayEquals");
    lib.bindSymbol_stdcall(blArrayGetCapacity, "blArrayGetCapacity");
    lib.bindSymbol_stdcall(blArrayGetData, "blArrayGetData");
    lib.bindSymbol_stdcall(blArrayGetSize, "blArrayGetSize");
    lib.bindSymbol_stdcall(blArrayInit, "blArrayInit");
    lib.bindSymbol_stdcall(blArrayInsertF32, "blArrayInsertF32");
    lib.bindSymbol_stdcall(blArrayInsertF64, "blArrayInsertF64");
    lib.bindSymbol_stdcall(blArrayInsertItem, "blArrayInsertItem");
    lib.bindSymbol_stdcall(blArrayInsertOp, "blArrayInsertOp");
    lib.bindSymbol_stdcall(blArrayInsertU16, "blArrayInsertU16");
    lib.bindSymbol_stdcall(blArrayInsertU32, "blArrayInsertU32");
    lib.bindSymbol_stdcall(blArrayInsertU64, "blArrayInsertU64");
    lib.bindSymbol_stdcall(blArrayInsertU8, "blArrayInsertU8");
    lib.bindSymbol_stdcall(blArrayInsertView, "blArrayInsertView");
    lib.bindSymbol_stdcall(blArrayMakeMutable, "blArrayMakeMutable");
    lib.bindSymbol_stdcall(blArrayModifyOp, "blArrayModifyOp");
    lib.bindSymbol_stdcall(blArrayRemoveIndex, "blArrayRemoveIndex");
    lib.bindSymbol_stdcall(blArrayRemoveRange, "blArrayRemoveRange");
    lib.bindSymbol_stdcall(blArrayReplaceF32, "blArrayReplaceF32");
    lib.bindSymbol_stdcall(blArrayReplaceF64, "blArrayReplaceF64");
    lib.bindSymbol_stdcall(blArrayReplaceItem, "blArrayReplaceItem");
    lib.bindSymbol_stdcall(blArrayReplaceU16, "blArrayReplaceU16");
    lib.bindSymbol_stdcall(blArrayReplaceU32, "blArrayReplaceU32");
    lib.bindSymbol_stdcall(blArrayReplaceU64, "blArrayReplaceU64");
    lib.bindSymbol_stdcall(blArrayReplaceU8, "blArrayReplaceU8");
    lib.bindSymbol_stdcall(blArrayReplaceView, "blArrayReplaceView");
    lib.bindSymbol_stdcall(blArrayReserve, "blArrayReserve");
    lib.bindSymbol_stdcall(blArrayReset, "blArrayReset");
    lib.bindSymbol_stdcall(blArrayResize, "blArrayResize");
    lib.bindSymbol_stdcall(blArrayShrink, "blArrayShrink");
    lib.bindSymbol_stdcall(blContextAssignMove, "blContextAssignMove");
    lib.bindSymbol_stdcall(blContextAssignWeak, "blContextAssignWeak");
    lib.bindSymbol_stdcall(blContextBegin, "blContextBegin");
    lib.bindSymbol_stdcall(blContextBlitImageD, "blContextBlitImageD");
    lib.bindSymbol_stdcall(blContextBlitImageI, "blContextBlitImageI");
    lib.bindSymbol_stdcall(blContextBlitScaledImageD, "blContextBlitScaledImageD");
    lib.bindSymbol_stdcall(blContextBlitScaledImageI, "blContextBlitScaledImageI");
    lib.bindSymbol_stdcall(blContextClearAll, "blContextClearAll");
    lib.bindSymbol_stdcall(blContextClearRectD, "blContextClearRectD");
    lib.bindSymbol_stdcall(blContextClearRectI, "blContextClearRectI");
    lib.bindSymbol_stdcall(blContextClipToRectD, "blContextClipToRectD");
    lib.bindSymbol_stdcall(blContextClipToRectI, "blContextClipToRectI");
    lib.bindSymbol_stdcall(blContextEnd, "blContextEnd");
    lib.bindSymbol_stdcall(blContextFillAll, "blContextFillAll");
    lib.bindSymbol_stdcall(blContextFillGeometry, "blContextFillGeometry");
    lib.bindSymbol_stdcall(blContextFillGlyphRunD, "blContextFillGlyphRunD");
    lib.bindSymbol_stdcall(blContextFillGlyphRunI, "blContextFillGlyphRunI");
    lib.bindSymbol_stdcall(blContextFillPathD, "blContextFillPathD");
    lib.bindSymbol_stdcall(blContextFillRectD, "blContextFillRectD");
    lib.bindSymbol_stdcall(blContextFillRectI, "blContextFillRectI");
    lib.bindSymbol_stdcall(blContextFillTextD, "blContextFillTextD");
    lib.bindSymbol_stdcall(blContextFillTextI, "blContextFillTextI");
    lib.bindSymbol_stdcall(blContextFlush, "blContextFlush");
    lib.bindSymbol_stdcall(blContextGetFillStyle, "blContextGetFillStyle");
    lib.bindSymbol_stdcall(blContextGetFillStyleRgba32, "blContextGetFillStyleRgba32");
    lib.bindSymbol_stdcall(blContextGetFillStyleRgba64, "blContextGetFillStyleRgba64");
    lib.bindSymbol_stdcall(blContextGetMetaMatrix, "blContextGetMetaMatrix");
    lib.bindSymbol_stdcall(blContextGetStrokeOptions, "blContextGetStrokeOptions");
    lib.bindSymbol_stdcall(blContextGetStrokeStyle, "blContextGetStrokeStyle");
    lib.bindSymbol_stdcall(blContextGetStrokeStyleRgba32, "blContextGetStrokeStyleRgba32");
    lib.bindSymbol_stdcall(blContextGetStrokeStyleRgba64, "blContextGetStrokeStyleRgba64");
    lib.bindSymbol_stdcall(blContextGetType, "blContextGetType");
    lib.bindSymbol_stdcall(blContextGetUserMatrix, "blContextGetUserMatrix");
    lib.bindSymbol_stdcall(blContextInit, "blContextInit");
    lib.bindSymbol_stdcall(blContextInitAs, "blContextInitAs");
    lib.bindSymbol_stdcall(blContextMatrixOp, "blContextMatrixOp");
    lib.bindSymbol_stdcall(blContextReset, "blContextReset");
    lib.bindSymbol_stdcall(blContextRestore, "blContextRestore");
    lib.bindSymbol_stdcall(blContextRestoreClipping, "blContextRestoreClipping");
    lib.bindSymbol_stdcall(blContextSave, "blContextSave");
    lib.bindSymbol_stdcall(blContextSetApproximationOptions, "blContextSetApproximationOptions");
    lib.bindSymbol_stdcall(blContextSetCompOp, "blContextSetCompOp");
    lib.bindSymbol_stdcall(blContextSetFillAlpha, "blContextSetFillAlpha");
    lib.bindSymbol_stdcall(blContextSetFillRule, "blContextSetFillRule");
    lib.bindSymbol_stdcall(blContextSetFillStyle, "blContextSetFillStyle");
    lib.bindSymbol_stdcall(blContextSetFillStyleRgba32, "blContextSetFillStyleRgba32");
    lib.bindSymbol_stdcall(blContextSetFillStyleRgba64, "blContextSetFillStyleRgba64");
    lib.bindSymbol_stdcall(blContextSetFlattenMode, "blContextSetFlattenMode");
    lib.bindSymbol_stdcall(blContextSetFlattenTolerance, "blContextSetFlattenTolerance");
    lib.bindSymbol_stdcall(blContextSetGlobalAlpha, "blContextSetGlobalAlpha");
    lib.bindSymbol_stdcall(blContextSetHint, "blContextSetHint");
    lib.bindSymbol_stdcall(blContextSetHints, "blContextSetHints");
    lib.bindSymbol_stdcall(blContextSetStrokeAlpha, "blContextSetStrokeAlpha");
    lib.bindSymbol_stdcall(blContextSetStrokeCap, "blContextSetStrokeCap");
    lib.bindSymbol_stdcall(blContextSetStrokeCaps, "blContextSetStrokeCaps");
    lib.bindSymbol_stdcall(blContextSetStrokeDashArray, "blContextSetStrokeDashArray");
    lib.bindSymbol_stdcall(blContextSetStrokeDashOffset, "blContextSetStrokeDashOffset");
    lib.bindSymbol_stdcall(blContextSetStrokeJoin, "blContextSetStrokeJoin");
    lib.bindSymbol_stdcall(blContextSetStrokeMiterLimit, "blContextSetStrokeMiterLimit");
    lib.bindSymbol_stdcall(blContextSetStrokeOptions, "blContextSetStrokeOptions");
    lib.bindSymbol_stdcall(blContextSetStrokeStyle, "blContextSetStrokeStyle");
    lib.bindSymbol_stdcall(blContextSetStrokeStyleRgba32, "blContextSetStrokeStyleRgba32");
    lib.bindSymbol_stdcall(blContextSetStrokeStyleRgba64, "blContextSetStrokeStyleRgba64");
    lib.bindSymbol_stdcall(blContextSetStrokeTransformOrder, "blContextSetStrokeTransformOrder");
    lib.bindSymbol_stdcall(blContextSetStrokeWidth, "blContextSetStrokeWidth");
    lib.bindSymbol_stdcall(blContextStrokeGeometry, "blContextStrokeGeometry");
    lib.bindSymbol_stdcall(blContextStrokeGlyphRunD, "blContextStrokeGlyphRunD");
    lib.bindSymbol_stdcall(blContextStrokeGlyphRunI, "blContextStrokeGlyphRunI");
    lib.bindSymbol_stdcall(blContextStrokePathD, "blContextStrokePathD");
    lib.bindSymbol_stdcall(blContextStrokeRectD, "blContextStrokeRectD");
    lib.bindSymbol_stdcall(blContextStrokeRectI, "blContextStrokeRectI");
    lib.bindSymbol_stdcall(blContextStrokeTextD, "blContextStrokeTextD");
    lib.bindSymbol_stdcall(blContextStrokeTextI, "blContextStrokeTextI");
    lib.bindSymbol_stdcall(blContextUserToMeta, "blContextUserToMeta");
    lib.bindSymbol_stdcall(blFileClose, "blFileClose");
    lib.bindSymbol_stdcall(blFileGetSize, "blFileGetSize");
    lib.bindSymbol_stdcall(blFileInit, "blFileInit");
    lib.bindSymbol_stdcall(blFileOpen, "blFileOpen");
    lib.bindSymbol_stdcall(blFileRead, "blFileRead");
    lib.bindSymbol_stdcall(blFileReset, "blFileReset");
    lib.bindSymbol_stdcall(blFileSeek, "blFileSeek");
    lib.bindSymbol_stdcall(blFileSystemReadFile, "blFileSystemReadFile");
    lib.bindSymbol_stdcall(blFileSystemWriteFile, "blFileSystemWriteFile");
    lib.bindSymbol_stdcall(blFileTruncate, "blFileTruncate");
    lib.bindSymbol_stdcall(blFileWrite, "blFileWrite");
    lib.bindSymbol_stdcall(blFontApplyGPos, "blFontApplyGPos");
    lib.bindSymbol_stdcall(blFontApplyGSub, "blFontApplyGSub");
    lib.bindSymbol_stdcall(blFontApplyKerning, "blFontApplyKerning");
    lib.bindSymbol_stdcall(blFontAssignMove, "blFontAssignMove");
    lib.bindSymbol_stdcall(blFontAssignWeak, "blFontAssignWeak");
    lib.bindSymbol_stdcall(blFontCreateFromFace, "blFontCreateFromFace");
    lib.bindSymbol_stdcall(blFontDataAssignMove, "blFontDataAssignMove");
    lib.bindSymbol_stdcall(blFontDataAssignWeak, "blFontDataAssignWeak");
    lib.bindSymbol_stdcall(blFontDataCreateFromFile, "blFontDataCreateFromFile");
    lib.bindSymbol_stdcall(blFontDataCreateFromDataArray, "blFontDataCreateFromDataArray");
    lib.bindSymbol_stdcall(blFontDataCreateFromData, "blFontDataCreateFromData");
    lib.bindSymbol_stdcall(blFontDataEquals, "blFontDataEquals");
    lib.bindSymbol_stdcall(blFontDataInit, "blFontDataInit");
    lib.bindSymbol_stdcall(blFontDataListTags, "blFontDataListTags");
    lib.bindSymbol_stdcall(blFontDataQueryTables, "blFontDataQueryTables");
    lib.bindSymbol_stdcall(blFontDataReset, "blFontDataReset");
    lib.bindSymbol_stdcall(blFontEquals, "blFontEquals");
    lib.bindSymbol_stdcall(blFontFaceAssignMove, "blFontFaceAssignMove");
    lib.bindSymbol_stdcall(blFontFaceAssignWeak, "blFontFaceAssignWeak");
    lib.bindSymbol_stdcall(blFontFaceCreateFromFile, "blFontFaceCreateFromFile");
    lib.bindSymbol_stdcall(blFontFaceCreateFromData, "blFontFaceCreateFromData");
    lib.bindSymbol_stdcall(blFontFaceEquals, "blFontFaceEquals");
    lib.bindSymbol_stdcall(blFontFaceGetDesignMetrics, "blFontFaceGetDesignMetrics");
    lib.bindSymbol_stdcall(blFontFaceGetFaceInfo, "blFontFaceGetFaceInfo");
    lib.bindSymbol_stdcall(blFontFaceGetUnicodeCoverage, "blFontFaceGetUnicodeCoverage");
    lib.bindSymbol_stdcall(blFontFaceInit, "blFontFaceInit");
    lib.bindSymbol_stdcall(blFontFaceReset, "blFontFaceReset");
    lib.bindSymbol_stdcall(blFontGetDesignMetrics, "blFontGetDesignMetrics");
    lib.bindSymbol_stdcall(blFontGetGlyphAdvances, "blFontGetGlyphAdvances");
    lib.bindSymbol_stdcall(blFontGetGlyphBounds, "blFontGetGlyphBounds");
    lib.bindSymbol_stdcall(blFontGetGlyphOutlines, "blFontGetGlyphOutlines");
    lib.bindSymbol_stdcall(blFontGetGlyphRunOutlines, "blFontGetGlyphRunOutlines");
    lib.bindSymbol_stdcall(blFontGetMatrix, "blFontGetMatrix");
    lib.bindSymbol_stdcall(blFontGetMetrics, "blFontGetMetrics");
    lib.bindSymbol_stdcall(blFontGetTextMetrics, "blFontGetTextMetrics");
    lib.bindSymbol_stdcall(blFontInit, "blFontInit");
    lib.bindSymbol_stdcall(blFontManagerInit, "blFontManagerInit");
    lib.bindSymbol_stdcall(blFontManagerReset, "blFontManagerReset");
    lib.bindSymbol_stdcall(blFontManagerAssignMove, "blFontManagerAssignMove");
    lib.bindSymbol_stdcall(blFontManagerAssignWeak, "blFontManagerAssignWeak");
    lib.bindSymbol_stdcall(blFontManagerEquals, "blFontManagerEquals");
    lib.bindSymbol_stdcall(blFontMapTextToGlyphs, "blFontMapTextToGlyphs");
    lib.bindSymbol_stdcall(blFontPositionGlyphs, "blFontPositionGlyphs");
    lib.bindSymbol_stdcall(blFontReset, "blFontReset");
    lib.bindSymbol_stdcall(blFontShape, "blFontShape");
    lib.bindSymbol_stdcall(blFormatInfoSanitize, "blFormatInfoSanitize");
    lib.bindSymbol_stdcall(blGlyphBufferClear, "blGlyphBufferClear");
    lib.bindSymbol_stdcall(blGlyphBufferGetFlags, "blGlyphBufferGetFlags");
    lib.bindSymbol_stdcall(blGlyphBufferGetGlyphRun, "blGlyphBufferGetGlyphRun");
    lib.bindSymbol_stdcall(blGlyphBufferGetSize, "blGlyphBufferGetSize");
    lib.bindSymbol_stdcall(blGlyphBufferInit, "blGlyphBufferInit");
    lib.bindSymbol_stdcall(blGlyphBufferInitMove, "blGlyphBufferInitMove");
    lib.bindSymbol_stdcall(blGlyphBufferReset, "blGlyphBufferReset");
    lib.bindSymbol_stdcall(blGlyphBufferSetGlyphIds, "blGlyphBufferSetGlyphIds");
    lib.bindSymbol_stdcall(blGlyphBufferSetText, "blGlyphBufferSetText");
    lib.bindSymbol_stdcall(blGradientAddStopRgba32, "blGradientAddStopRgba32");
    lib.bindSymbol_stdcall(blGradientAddStopRgba64, "blGradientAddStopRgba64");
    lib.bindSymbol_stdcall(blGradientApplyMatrixOp, "blGradientApplyMatrixOp");
    lib.bindSymbol_stdcall(blGradientAssignMove, "blGradientAssignMove");
    lib.bindSymbol_stdcall(blGradientAssignStops, "blGradientAssignStops");
    lib.bindSymbol_stdcall(blGradientAssignWeak, "blGradientAssignWeak");
    lib.bindSymbol_stdcall(blGradientCreate, "blGradientCreate");
    lib.bindSymbol_stdcall(blGradientEquals, "blGradientEquals");
    lib.bindSymbol_stdcall(blGradientGetCapacity, "blGradientGetCapacity");
    lib.bindSymbol_stdcall(blGradientGetExtendMode, "blGradientGetExtendMode");
    lib.bindSymbol_stdcall(blGradientGetSize, "blGradientGetSize");
    lib.bindSymbol_stdcall(blGradientGetStops, "blGradientGetStops");
    lib.bindSymbol_stdcall(blGradientGetType, "blGradientGetType");
    lib.bindSymbol_stdcall(blGradientGetValue, "blGradientGetValue");
    lib.bindSymbol_stdcall(blGradientIndexOfStop, "blGradientIndexOfStop");
    lib.bindSymbol_stdcall(blGradientInit, "blGradientInit");
    lib.bindSymbol_stdcall(blGradientInitAs, "blGradientInitAs");
    lib.bindSymbol_stdcall(blGradientRemoveStop, "blGradientRemoveStop");
    lib.bindSymbol_stdcall(blGradientRemoveStopByOffset, "blGradientRemoveStopByOffset");
    lib.bindSymbol_stdcall(blGradientRemoveStops, "blGradientRemoveStops");
    lib.bindSymbol_stdcall(blGradientRemoveStopsFromTo, "blGradientRemoveStopsFromTo");
    lib.bindSymbol_stdcall(blGradientReplaceStopRgba32, "blGradientReplaceStopRgba32");
    lib.bindSymbol_stdcall(blGradientReplaceStopRgba64, "blGradientReplaceStopRgba64");
    lib.bindSymbol_stdcall(blGradientReserve, "blGradientReserve");
    lib.bindSymbol_stdcall(blGradientReset, "blGradientReset");
    lib.bindSymbol_stdcall(blGradientResetStops, "blGradientResetStops");
    lib.bindSymbol_stdcall(blGradientSetExtendMode, "blGradientSetExtendMode");
    lib.bindSymbol_stdcall(blGradientSetType, "blGradientSetType");
    lib.bindSymbol_stdcall(blGradientSetValue, "blGradientSetValue");
    lib.bindSymbol_stdcall(blGradientSetValues, "blGradientSetValues");
    lib.bindSymbol_stdcall(blGradientShrink, "blGradientShrink");
    lib.bindSymbol_stdcall(blImageAssignDeep, "blImageAssignDeep");
    lib.bindSymbol_stdcall(blImageAssignMove, "blImageAssignMove");
    lib.bindSymbol_stdcall(blImageAssignWeak, "blImageAssignWeak");
    lib.bindSymbol_stdcall(blImageCodecAddToBuiltIn, "blImageCodecAddToBuiltIn");
    lib.bindSymbol_stdcall(blImageCodecArrayAssignBuiltInCodecs, "blImageCodecArrayAssignBuiltInCodecs");
    lib.bindSymbol_stdcall(blImageCodecArrayInitBuiltInCodecs, "blImageCodecArrayInitBuiltInCodecs");
    lib.bindSymbol_stdcall(blImageCodecAssignWeak, "blImageCodecAssignWeak");
    lib.bindSymbol_stdcall(blImageCodecCreateDecoder, "blImageCodecCreateDecoder");
    lib.bindSymbol_stdcall(blImageCodecCreateEncoder, "blImageCodecCreateEncoder");
    lib.bindSymbol_stdcall(blImageCodecFindByData, "blImageCodecFindByData");
    lib.bindSymbol_stdcall(blImageCodecFindByName, "blImageCodecFindByName");
    lib.bindSymbol_stdcall(blImageCodecInit, "blImageCodecInit");
    lib.bindSymbol_stdcall(blImageCodecInspectData, "blImageCodecInspectData");
    lib.bindSymbol_stdcall(blImageCodecRemoveFromBuiltIn, "blImageCodecRemoveFromBuiltIn");
    lib.bindSymbol_stdcall(blImageCodecReset, "blImageCodecReset");
    lib.bindSymbol_stdcall(blImageCreate, "blImageCreate");
    lib.bindSymbol_stdcall(blImageCreateFromData, "blImageCreateFromData");
    lib.bindSymbol_stdcall(blImageDecoderAssignMove, "blImageDecoderAssignMove");
    lib.bindSymbol_stdcall(blImageDecoderAssignWeak, "blImageDecoderAssignWeak");
    lib.bindSymbol_stdcall(blImageDecoderInit, "blImageDecoderInit");
    lib.bindSymbol_stdcall(blImageDecoderReadFrame, "blImageDecoderReadFrame");
    lib.bindSymbol_stdcall(blImageDecoderReadInfo, "blImageDecoderReadInfo");
    lib.bindSymbol_stdcall(blImageDecoderReset, "blImageDecoderReset");
    lib.bindSymbol_stdcall(blImageDecoderRestart, "blImageDecoderRestart");
    lib.bindSymbol_stdcall(blImageEncoderAssignMove, "blImageEncoderAssignMove");
    lib.bindSymbol_stdcall(blImageEncoderAssignWeak, "blImageEncoderAssignWeak");
    lib.bindSymbol_stdcall(blImageEncoderInit, "blImageEncoderInit");
    lib.bindSymbol_stdcall(blImageEncoderReset, "blImageEncoderReset");
    lib.bindSymbol_stdcall(blImageEncoderRestart, "blImageEncoderRestart");
    lib.bindSymbol_stdcall(blImageEncoderWriteFrame, "blImageEncoderWriteFrame");
    lib.bindSymbol_stdcall(blImageEquals, "blImageEquals");
    lib.bindSymbol_stdcall(blImageGetData, "blImageGetData");
    lib.bindSymbol_stdcall(blImageInit, "blImageInit");
    lib.bindSymbol_stdcall(blImageInitAs, "blImageInitAs");
    lib.bindSymbol_stdcall(blImageInitAsFromData, "blImageInitAsFromData");
    lib.bindSymbol_stdcall(blImageMakeMutable, "blImageMakeMutable");
    lib.bindSymbol_stdcall(blImageConvert, "blImageConvert");
    lib.bindSymbol_stdcall(blImageReadFromData, "blImageReadFromData");
    lib.bindSymbol_stdcall(blImageReadFromFile, "blImageReadFromFile");
    lib.bindSymbol_stdcall(blImageReset, "blImageReset");
    lib.bindSymbol_stdcall(blImageScale, "blImageScale");
    lib.bindSymbol_stdcall(blImageWriteToData, "blImageWriteToData");
    lib.bindSymbol_stdcall(blImageWriteToFile, "blImageWriteToFile");
    lib.bindSymbol_stdcall(blMatrix2DApplyOp, "blMatrix2DApplyOp");
    lib.bindSymbol_stdcall(blMatrix2DGetType, "blMatrix2DGetType");
    lib.bindSymbol_stdcall(blMatrix2DInvert, "blMatrix2DInvert");
    lib.bindSymbol_stdcall(blMatrix2DMapPointDArray, "blMatrix2DMapPointDArray");
    lib.bindSymbol_stdcall(blMatrix2DSetIdentity, "blMatrix2DSetIdentity");
    lib.bindSymbol_stdcall(blMatrix2DSetRotation, "blMatrix2DSetRotation");
    lib.bindSymbol_stdcall(blMatrix2DSetScaling, "blMatrix2DSetScaling");
    lib.bindSymbol_stdcall(blMatrix2DSetSkewing, "blMatrix2DSetSkewing");
    lib.bindSymbol_stdcall(blMatrix2DSetTranslation, "blMatrix2DSetTranslation");
    lib.bindSymbol_stdcall(blPathAddBoxD, "blPathAddBoxD");
    lib.bindSymbol_stdcall(blPathAddBoxI, "blPathAddBoxI");
    lib.bindSymbol_stdcall(blPathAddGeometry, "blPathAddGeometry");
    lib.bindSymbol_stdcall(blPathAddPath, "blPathAddPath");
    lib.bindSymbol_stdcall(blPathAddRectD, "blPathAddRectD");
    lib.bindSymbol_stdcall(blPathAddRectI, "blPathAddRectI");
    lib.bindSymbol_stdcall(blPathAddReversedPath, "blPathAddReversedPath");
    lib.bindSymbol_stdcall(blPathAddStrokedPath, "blPathAddStrokedPath");
    lib.bindSymbol_stdcall(blPathAddTransformedPath, "blPathAddTransformedPath");
    lib.bindSymbol_stdcall(blPathAddTranslatedPath, "blPathAddTranslatedPath");
    lib.bindSymbol_stdcall(blPathArcQuadrantTo, "blPathArcQuadrantTo");
    lib.bindSymbol_stdcall(blPathArcTo, "blPathArcTo");
    lib.bindSymbol_stdcall(blPathAssignDeep, "blPathAssignDeep");
    lib.bindSymbol_stdcall(blPathAssignMove, "blPathAssignMove");
    lib.bindSymbol_stdcall(blPathAssignWeak, "blPathAssignWeak");
    lib.bindSymbol_stdcall(blPathClear, "blPathClear");
    lib.bindSymbol_stdcall(blPathClose, "blPathClose");
    lib.bindSymbol_stdcall(blPathCubicTo, "blPathCubicTo");
    lib.bindSymbol_stdcall(blPathEllipticArcTo, "blPathEllipticArcTo");
    lib.bindSymbol_stdcall(blPathEquals, "blPathEquals");
    lib.bindSymbol_stdcall(blPathFitTo, "blPathFitTo");
    lib.bindSymbol_stdcall(blPathGetBoundingBox, "blPathGetBoundingBox");
    lib.bindSymbol_stdcall(blPathGetCapacity, "blPathGetCapacity");
    lib.bindSymbol_stdcall(blPathGetClosestVertex, "blPathGetClosestVertex");
    lib.bindSymbol_stdcall(blPathGetCommandData, "blPathGetCommandData");
    lib.bindSymbol_stdcall(blPathGetControlBox, "blPathGetControlBox");
    lib.bindSymbol_stdcall(blPathGetFigureRange, "blPathGetFigureRange");
    lib.bindSymbol_stdcall(blPathGetInfoFlags, "blPathGetInfoFlags");
    lib.bindSymbol_stdcall(blPathGetLastVertex, "blPathGetLastVertex");
    lib.bindSymbol_stdcall(blPathGetSize, "blPathGetSize");
    lib.bindSymbol_stdcall(blPathGetVertexData, "blPathGetVertexData");
    lib.bindSymbol_stdcall(blPathHitTest, "blPathHitTest");
    lib.bindSymbol_stdcall(blPathInit, "blPathInit");
    lib.bindSymbol_stdcall(blPathLineTo, "blPathLineTo");
    lib.bindSymbol_stdcall(blPathModifyOp, "blPathModifyOp");
    lib.bindSymbol_stdcall(blPathMoveTo, "blPathMoveTo");
    lib.bindSymbol_stdcall(blPathPolyTo, "blPathPolyTo");
    lib.bindSymbol_stdcall(blPathQuadTo, "blPathQuadTo");
    lib.bindSymbol_stdcall(blPathReserve, "blPathReserve");
    lib.bindSymbol_stdcall(blPathReset, "blPathReset");
    lib.bindSymbol_stdcall(blPathSetVertexAt, "blPathSetVertexAt");
    lib.bindSymbol_stdcall(blPathShrink, "blPathShrink");
    lib.bindSymbol_stdcall(blPathSmoothCubicTo, "blPathSmoothCubicTo");
    lib.bindSymbol_stdcall(blPathSmoothQuadTo, "blPathSmoothQuadTo");
    lib.bindSymbol_stdcall(blPathTransform, "blPathTransform");
    lib.bindSymbol_stdcall(blPathTranslate, "blPathTranslate");
    lib.bindSymbol_stdcall(blPatternApplyMatrixOp, "blPatternApplyMatrixOp");
    lib.bindSymbol_stdcall(blPatternAssignDeep, "blPatternAssignDeep");
    lib.bindSymbol_stdcall(blPatternAssignMove, "blPatternAssignMove");
    lib.bindSymbol_stdcall(blPatternAssignWeak, "blPatternAssignWeak");
    lib.bindSymbol_stdcall(blPatternCreate, "blPatternCreate");
    lib.bindSymbol_stdcall(blPatternEquals, "blPatternEquals");
    lib.bindSymbol_stdcall(blPatternInit, "blPatternInit");
    lib.bindSymbol_stdcall(blPatternInitAs, "blPatternInitAs");
    lib.bindSymbol_stdcall(blPatternReset, "blPatternReset");
    lib.bindSymbol_stdcall(blPatternSetArea, "blPatternSetArea");
    lib.bindSymbol_stdcall(blPatternSetExtendMode, "blPatternSetExtendMode");
    lib.bindSymbol_stdcall(blPatternSetImage, "blPatternSetImage");
    lib.bindSymbol_stdcall(blPixelConverterAssign, "blPixelConverterAssign");
    lib.bindSymbol_stdcall(blPixelConverterConvert, "blPixelConverterConvert");
    lib.bindSymbol_stdcall(blPixelConverterCreate, "blPixelConverterCreate");
    lib.bindSymbol_stdcall(blPixelConverterInit, "blPixelConverterInit");
    lib.bindSymbol_stdcall(blPixelConverterInitWeak, "blPixelConverterInitWeak");
    lib.bindSymbol_stdcall(blPixelConverterReset, "blPixelConverterReset");
    lib.bindSymbol_stdcall(blRandomNextDouble, "blRandomNextDouble");
    lib.bindSymbol_stdcall(blRandomNextUInt32, "blRandomNextUInt32");
    lib.bindSymbol_stdcall(blRandomNextUInt64, "blRandomNextUInt64");
    lib.bindSymbol_stdcall(blRandomReset, "blRandomReset");
    lib.bindSymbol_stdcall(blRegionAssignBoxI, "blRegionAssignBoxI");
    lib.bindSymbol_stdcall(blRegionAssignBoxIArray, "blRegionAssignBoxIArray");
    lib.bindSymbol_stdcall(blRegionAssignDeep, "blRegionAssignDeep");
    lib.bindSymbol_stdcall(blRegionAssignMove, "blRegionAssignMove");
    lib.bindSymbol_stdcall(blRegionAssignRectI, "blRegionAssignRectI");
    lib.bindSymbol_stdcall(blRegionAssignRectIArray, "blRegionAssignRectIArray");
    lib.bindSymbol_stdcall(blRegionAssignWeak, "blRegionAssignWeak");
    lib.bindSymbol_stdcall(blRegionClear, "blRegionClear");
    lib.bindSymbol_stdcall(blRegionCombine, "blRegionCombine");
    lib.bindSymbol_stdcall(blRegionCombineBB, "blRegionCombineBB");
    lib.bindSymbol_stdcall(blRegionCombineBR, "blRegionCombineBR");
    lib.bindSymbol_stdcall(blRegionCombineRB, "blRegionCombineRB");
    lib.bindSymbol_stdcall(blRegionEquals, "blRegionEquals");
    lib.bindSymbol_stdcall(blRegionGetCapacity, "blRegionGetCapacity");
    lib.bindSymbol_stdcall(blRegionGetData, "blRegionGetData");
    lib.bindSymbol_stdcall(blRegionGetSize, "blRegionGetSize");
    lib.bindSymbol_stdcall(blRegionGetType, "blRegionGetType");
    lib.bindSymbol_stdcall(blRegionHitTest, "blRegionHitTest");
    lib.bindSymbol_stdcall(blRegionHitTestBoxI, "blRegionHitTestBoxI");
    lib.bindSymbol_stdcall(blRegionInit, "blRegionInit");
    lib.bindSymbol_stdcall(blRegionIntersectAndClip, "blRegionIntersectAndClip");
    lib.bindSymbol_stdcall(blRegionReserve, "blRegionReserve");
    lib.bindSymbol_stdcall(blRegionReset, "blRegionReset");
    lib.bindSymbol_stdcall(blRegionShrink, "blRegionShrink");
    lib.bindSymbol_stdcall(blRegionTranslate, "blRegionTranslate");
    lib.bindSymbol_stdcall(blRegionTranslateAndClip, "blRegionTranslateAndClip");
    lib.bindSymbol_stdcall(blResultFromWinError, "blResultFromWinError");
    lib.bindSymbol_stdcall(blRuntimeAssertionFailure, "blRuntimeAssertionFailure");
    lib.bindSymbol_stdcall(blRuntimeCleanup, "blRuntimeCleanup");
    lib.bindSymbol_stdcall(blRuntimeGetTickCount, "blRuntimeGetTickCount");
    lib.bindSymbol_stdcall(blRuntimeInit, "blRuntimeInit");
    lib.bindSymbol_stdcall(blRuntimeMessageFmt, "blRuntimeMessageFmt");
    lib.bindSymbol_stdcall(blRuntimeMessageOut, "blRuntimeMessageOut");
    lib.bindSymbol_stdcall(blRuntimeMessageVFmt, "blRuntimeMessageVFmt");
    lib.bindSymbol_stdcall(blRuntimeQueryInfo, "blRuntimeQueryInfo");
    lib.bindSymbol_stdcall(blRuntimeShutdown, "blRuntimeShutdown");
    lib.bindSymbol_stdcall(blStringApplyOpChar, "blStringApplyOpChar");
    lib.bindSymbol_stdcall(blStringApplyOpData, "blStringApplyOpData");
    lib.bindSymbol_stdcall(blStringApplyOpFormat, "blStringApplyOpFormat");
    lib.bindSymbol_stdcall(blStringApplyOpFormatV, "blStringApplyOpFormatV");
    lib.bindSymbol_stdcall(blStringApplyOpString, "blStringApplyOpString");
    lib.bindSymbol_stdcall(blStringAssignData, "blStringAssignData");
    lib.bindSymbol_stdcall(blStringAssignDeep, "blStringAssignDeep");
    lib.bindSymbol_stdcall(blStringAssignMove, "blStringAssignMove");
    lib.bindSymbol_stdcall(blStringAssignWeak, "blStringAssignWeak");
    lib.bindSymbol_stdcall(blStringClear, "blStringClear");
    lib.bindSymbol_stdcall(blStringCompare, "blStringCompare");
    lib.bindSymbol_stdcall(blStringCompareData, "blStringCompareData");
    lib.bindSymbol_stdcall(blStringEquals, "blStringEquals");
    lib.bindSymbol_stdcall(blStringEqualsData, "blStringEqualsData");
    lib.bindSymbol_stdcall(blStringGetCapacity, "blStringGetCapacity");
    lib.bindSymbol_stdcall(blStringGetData, "blStringGetData");
    lib.bindSymbol_stdcall(blStringGetSize, "blStringGetSize");
    lib.bindSymbol_stdcall(blStringInit, "blStringInit");
    lib.bindSymbol_stdcall(blStringInsertChar, "blStringInsertChar");
    lib.bindSymbol_stdcall(blStringInsertData, "blStringInsertData");
    lib.bindSymbol_stdcall(blStringInsertOp, "blStringInsertOp");
    lib.bindSymbol_stdcall(blStringInsertString, "blStringInsertString");
    lib.bindSymbol_stdcall(blStringMakeMutable, "blStringMakeMutable");
    lib.bindSymbol_stdcall(blStringModifyOp, "blStringModifyOp");
    lib.bindSymbol_stdcall(blStringRemoveRange, "blStringRemoveRange");
    lib.bindSymbol_stdcall(blStringReserve, "blStringReserve");
    lib.bindSymbol_stdcall(blStringReset, "blStringReset");
    lib.bindSymbol_stdcall(blStringResize, "blStringResize");
    lib.bindSymbol_stdcall(blStringShrink, "blStringShrink");
    lib.bindSymbol_stdcall(blStrokeOptionsAssignMove, "blStrokeOptionsAssignMove");
    lib.bindSymbol_stdcall(blStrokeOptionsAssignWeak, "blStrokeOptionsAssignWeak");
    lib.bindSymbol_stdcall(blStrokeOptionsInit, "blStrokeOptionsInit");
    lib.bindSymbol_stdcall(blStrokeOptionsInitMove, "blStrokeOptionsInitMove");
    lib.bindSymbol_stdcall(blStrokeOptionsInitWeak, "blStrokeOptionsInitWeak");
    lib.bindSymbol_stdcall(blStrokeOptionsReset, "blStrokeOptionsReset");
    lib.bindSymbol_stdcall(blVariantAssignMove, "blVariantAssignMove");
    lib.bindSymbol_stdcall(blVariantAssignWeak, "blVariantAssignWeak");
    lib.bindSymbol_stdcall(blVariantEquals, "blVariantEquals");
    lib.bindSymbol_stdcall(blVariantGetImplType, "blVariantGetImplType");
    lib.bindSymbol_stdcall(blVariantInit, "blVariantInit");
    lib.bindSymbol_stdcall(blVariantInitMove, "blVariantInitMove");
    lib.bindSymbol_stdcall(blVariantInitWeak, "blVariantInitWeak");
    lib.bindSymbol_stdcall(blVariantReset, "blVariantReset");

    if(errorCount() != errCount) return Blend2DSupport.badLibrary;
    else loadedVersion = Blend2DSupport.bl00;

    return loadedVersion;
}
